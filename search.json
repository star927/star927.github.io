[{"categories":["Blog"],"content":"1 购买域名 如阿里云、腾讯云、华为云等都可以购买域名，同一个域名不同厂商的价格可能不一样。 ","date":"2021-08-28","objectID":"/posts/github-custom-domain/:1:0","tags":["Blog","Jekyll","Github"],"title":"GitHub Pages绑定个人域名","uri":"/posts/github-custom-domain/"},{"categories":["Blog"],"content":"2 域名解析 以阿里云为例，进入域名控制台，解析新购买的域名。添加下面两条记录，记录值填写Github Pages的原始域名user-name.github.io，记录类型选择CNAME，比如自己的域名是hxhuxin.top，那么主机记录www对应的网址就是www.hxhuxin.top，主机记录@对应的网址是hxhuxin.top。添加完两条记录后，需等待十几分钟。 ","date":"2021-08-28","objectID":"/posts/github-custom-domain/:2:0","tags":["Blog","Jekyll","Github"],"title":"GitHub Pages绑定个人域名","uri":"/posts/github-custom-domain/"},{"categories":["Blog"],"content":"3 Github Pages绑定个人域名 进入自己博客对应的仓库，打开【Settings】-【 Pages】， 在Custom domain下填写自己的域名后点击Save，Enforce HTTPS选项可以勾选上，强制使用HTTPS。 点击Save后可能提示绑定不成功，十几分钟后再试一下即可，域名解析需要等待一定的时间。 ","date":"2021-08-28","objectID":"/posts/github-custom-domain/:3:0","tags":["Blog","Jekyll","Github"],"title":"GitHub Pages绑定个人域名","uri":"/posts/github-custom-domain/"},{"categories":["Blog"],"content":"1 生成一个Github Token 进入Github主页，点击右上角个人头像，【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，如下图： Note可自定义，勾选repo。生成Token后，复制Token，之后该Token将不可见，如下图： ","date":"2021-08-28","objectID":"/posts/jsdelivr-image-hosting/:1:0","tags":["Blog","Jekyll","jsDelivr","图床"],"title":"GitHub+jsDelivr+PicGo搭建免费图床","uri":"/posts/jsdelivr-image-hosting/"},{"categories":["Blog"],"content":"2 配置PicGo PicGo安装完成后，打开图床设置，配置GitHub图床，如下图： Tips: Mac系统打开PicGo后并不会看到PicGo的主界面，在菜单栏中找到PicGo图标，右键点击“打开详细窗口”即可打开PicGo主界面。 设定仓库名：格式是用户名/仓库名，可以新建一个GitHub仓库，专门用作图床 设定分支名：默认分支main即可 设定Token：复制刚刚生成的Token到此处 指定储存路径：如果不填，则之后图片会上传到仓库的根目录下，也可以指定存储路径（路径最后要加/） 设定自定义域名：基于jsDelivr搭建图床，则域名格式为：https://cdn.jsdelivr.net/gh/user/repo@version，如https://cdn.jsdelivr.net/gh/star927/Image-Hosting@main，设置完成后，即可通过https://cdn.jsdelivr.net/gh/user/repo@version/file格式访问文件了，如https://cdn.jsdelivr.net/gh/star927/Image-Hosting@main/202108/PicGo.png 配置完PicGo后，之后就可以通过PicGo快速将图片上传至GitHub仓库了。图片成功上传后，PicGo会自动将图片链接复制到粘贴板。PicGo常用的操作是：选定需要上传的图片，Command+C复制图片；Command+Shift+P上传刚刚复制的图片，Command+V获得图片链接。更多PicGo操作可自行探索。 ","date":"2021-08-28","objectID":"/posts/jsdelivr-image-hosting/:2:0","tags":["Blog","Jekyll","jsDelivr","图床"],"title":"GitHub+jsDelivr+PicGo搭建免费图床","uri":"/posts/jsdelivr-image-hosting/"},{"categories":["Blog"],"content":"1 配置LeanCloud 进入LeanCloud官网https://www.leancloud.cn/，注册或登录账号。 创建应用，应用名称可自行设定。 创建Class，【数据存储】-【结构化数据】-【创建Class】，Class名称与后面相关代码有关，为减少不必要的麻烦，建议将Class名称设置为Counter，其它设置项默认值即可。 以后每篇文章的点击量等信息都可在该Class下查看。 设置安全域名，【设置】-【安全中心】-【Web安全域名】，填写自己博客的域名即可，在本地调试阶段还可以添加http://127.0.0.1:4000 查看App ID和App Key，【设置】-【应用凭证】-【Credentials】，App ID和App Key在后面的配置中会用到。 安全设置，【设置】-【安全中心】-【服务开关】，由于App ID和App Key会出现在博客的配置文件中，相当于是公开的，所以有必要进行安全设置，关闭不需要的服务。 ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:1:0","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"2 修改博客配置文件 需要修改或新增的文件如下： . ├── _config.yml ├── _includes │ └── leancloud-analytics.html └── _layouts ├── default.html └── post.html ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:2:0","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"_config.yml leancloud: enable: true app_id: xxxxxx app_key: xxxxxx enable是一个总开关，控制LeanCould统计功能是否开启，app_id和app_key对应LeanCloud的App ID和App Key ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:2:1","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"leancloud-analytics.html 创建leancloud-analytics.html文件，放在_includes文件夹下，代码如下： 代码参考于https://blog.csdn.net/u013553529/article/details/63357382 \u003cscript src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"\u003e\u003c/script\u003e \u003cscript\u003eAV.initialize(\"{{site.leancloud.app_id}}\", \"{{site.leancloud.app_key}}\");\u003c/script\u003e \u003cscript\u003e function showHitCount(Counter) { var query = new AV.Query(Counter); var entries = []; var $visitors = $(\".leancloud_visitors\"); $visitors.each(function () { entries.push( $(this).attr(\"id\").trim() ); }); query.containedIn('url', entries); query.find() .done(function (results) { var COUNT_CONTAINER_REF = '.leancloud-visitors-count'; if (results.length === 0) { $visitors.find(COUNT_CONTAINER_REF).text(0); return; } for (var i = 0; i \u003c results.length; i++) { var item = results[i]; var url = item.get('url'); var hits = item.get('hits'); var element = document.getElementById(url); $(element).find(COUNT_CONTAINER_REF).text(hits); } for(var i = 0; i \u003c entries.length; i++) { var url = entries[i]; var element = document.getElementById(url); var countSpan = $(element).find(COUNT_CONTAINER_REF); if( countSpan.text() == '') { countSpan.text(0); } } }) .fail(function (object, error) { console.log(\"Error: \" + error.code + \" \" + error.message); }); } function addCount(Counter) { var $visitors = $(\".leancloud_visitors\"); var url = $visitors.attr('id').trim(); var title = $visitors.attr('data-flag-title').trim(); var query = new AV.Query(Counter); query.equalTo(\"url\", url); query.find({ success: function(results) { if (results.length \u003e 0) { var counter = results[0]; counter.fetchWhenSave(true); counter.increment(\"hits\"); counter.save(null, { success: function(counter) { var $element = $(document.getElementById(url)); $element.find('.leancloud-visitors-count').text(counter.get('hits')); }, error: function(counter, error) { console.log('Failed to save Visitor num, with error message: ' + error.message); } }); } else { var newcounter = new Counter(); /* Set ACL */ var acl = new AV.ACL(); acl.setPublicReadAccess(true); acl.setPublicWriteAccess(true); newcounter.setACL(acl); /* End Set ACL */ newcounter.set(\"title\", title); newcounter.set(\"url\", url); newcounter.set(\"hits\", 1); newcounter.save(null, { success: function(newcounter) { var $element = $(document.getElementById(url)); $element.find('.leancloud-visitors-count').text(newcounter.get('hits')); }, error: function(newcounter, error) { console.log('Failed to create'); } }); } }, error: function(error) { console.log('Error:' + error.code + \" \" + error.message); } }); } $(function() { var Counter = AV.Object.extend(\"Counter\"); if ($('.leancloud_visitors').length == 1) { /* in post.html, so add 1 to hit counts */ addCount(Counter); } }); \u003c/script\u003e ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:2:2","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"default.html 将下面代码添加进_layouts/default.html文件中，这样每一篇博客中都会加载leancloud-analytics.html文件。 {% raw %}{% if site.leancloud.enable %} {% include leancloud-analytics.html %} {% endif %}{% endraw %} ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:2:3","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"post.html 想在每篇博客中显示该篇文章的阅读量，可将下面代码添加在_layouts/post.html合适的位置。 {% raw %}{% if site.leancloud.enable %}{% endraw %} \u003cspan\u003e|\u003c/span\u003e \u003ci class=\"far fa-eye\"\u003e\u003c/i\u003e \u003cspan id=\"{{ page.url }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ page.title }}\"\u003e \u003cspan class=\"leancloud-visitors-count\"\u003e\u003c/span\u003e \u003cspan class=\"post-meta-item-text\"\u003e次阅读\u003c/span\u003e \u003c/span\u003e {% raw %}{% endif %}{% endraw %} 效果图如下： 至此，LeanCloud统计功能配置完毕，登录LeanCloud打开上面创建的Class即可进行后台数据管理。 ","date":"2021-08-28","objectID":"/posts/jekyli-leancloud/:2:4","tags":["Blog","LeanCloud","Jekyll"],"title":"Jekyll博客中基于LeanCloud统计文章阅读量","uri":"/posts/jekyli-leancloud/"},{"categories":["Blog"],"content":"Gitalk评论系统的效果图如下： Gitalk每篇文章的评论对应于Github上的一个Issues，配置完Gitalk后，进入博客对应的Github仓库的Issues，就可以管理评论数据了，下面来配置Gitalk评论系统。 ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:0:0","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"1 创建Github OAuth Apps 进入Github主页，点击右上角个人头像，【Settings】-【Developer settings】-【OAuth Apps】-【New OAuth App】，可看到如下界面： Application name: 应用的名字，自定义 Homepage URL: 填写自己博客的URL，如https://star927.github.io/ Application description: 应用描述，选填项 Authorization callback URL: 与Homepage URL一样即可 如果Github Pages已经绑定了个人域名，则Homepage URL和Authorization callback URL需要填写自己的域名，如https://hxhuxin.top/ ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:1:0","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"2 在Jekyll中配置Gitalk 需要修改文件如下： . ├── _config.yml ├── _includes │ └── head.html └── _layouts └── post.html ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:2:0","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"_config.yml 在_config.yml文件中添加以下代码： gitalk: enable: true # 总开关，控制gitalk功能是否开启 clientId: 申请的OAuth App的Client ID clientSecret: 申请的OAuth App的Client ID repo: 博客对应的仓库名称 owner: 自己的Github用户名 admin: 自己的Github用户名 distractionFreeMode: true # 若设置为true，则当在评论框输入时，周围区域会变暗 repo是自己博客对应的仓库的名称，如star927.github.io，而不是该仓库的URL ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:2:1","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"head.html 找到自己博客\u003chead\u003e标签所在的文件，如_includes/head.html，在\u003c/head\u003e标签前添加以下代码。 {% raw %}{% if page.layout == 'post' and site.gitalk.enable %}{% endraw %} \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\"\u003e {% raw %}{% endif %}{% endraw %} ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:2:2","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"post.html 在_layouts/post.html文件的适当位置添加以下代码，这样每篇博客最后都会有Gitalk评论区。 \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e const gitalk = new Gitalk ({ id: window.location.pathname, clientID: '{% raw %}{{ site.gitalk.clientId }}{% endraw %}', clientSecret: '{% raw %}{{ site.gitalk.clientSecret }}{% endraw %}', repo: '{% raw %}{{ site.gitalk.repo }}{% endraw %}', owner: '{% raw %}{{ site.gitalk.owner }}{% endraw %}', admin: ['{% raw %}{{ site.gitalk.admin }}{% endraw %}'], distractionFreeMode: '{% raw %}{{ site.gitalk.distractionFreeMode }}{% endraw %}' }); gitalk.render('gitalk-container'); \u003c/script\u003e 上述步骤完成后，在评论区如果出现问题 Error: Not Found.（如下图），请仔细检查代码是否有误。 ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:2:3","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"3 初始化Gitalk 正确完成上述步骤后，在评论区可看到以下内容，点击使用Github登录即可。 必须将上述代码的修改提交到Github上，通过https://your-user-name.github.io/或者自己已绑定的域名访问自己的博客，再点击使用Github登录，而不是在本地服务器http://127.0.0.1:4000/点击使用Github登录。 登录自己的Github账号后，就可以看到Gitalk评论区了。 ","date":"2021-08-28","objectID":"/posts/jekyll-gitalk/:3:0","tags":["Blog","Jekyll","Gitalk"],"title":"Jekyll博客中添加Gitalk评论系统","uri":"/posts/jekyll-gitalk/"},{"categories":["Blog"],"content":"Valine评论系统的效果图如下： 下面一步步来配置Valine评论系统 ","date":"2021-08-28","objectID":"/posts/jekyll-valine/:0:0","tags":["Blog","Valine","Jekyll"],"title":"Jekyll博客中添加Valine评论系统","uri":"/posts/jekyll-valine/"},{"categories":["Blog"],"content":"1 配置LeanCloud 进入LeanCloud官网https://www.leancloud.cn/，注册/登录账号。 创建应用，应用名称可自行设定。 查看App ID和App Key，【设置】-【应用凭证】-【Credentials】，App ID和App Key在后面的配置中会用到。 ","date":"2021-08-28","objectID":"/posts/jekyll-valine/:1:0","tags":["Blog","Valine","Jekyll"],"title":"Jekyll博客中添加Valine评论系统","uri":"/posts/jekyll-valine/"},{"categories":["Blog"],"content":"2 修改博客配置文件 在_config.yml文件中添加以下代码： valine: enable: true app_id: xxxxxx app_key: xxxxxx enable是一个总开关，控制Valine评论功能是否开启，app_id和app_key对应LeanCloud的App ID和App Key。 更多配置项参见官方文档：https://valine.js.org/configuration.html 创建valine.html文件，放在_includes文件夹下，代码如下： \u003cscript src='//unpkg.com/valine/dist/Valine.min.js'\u003e\u003c/script\u003e \u003cdiv id=\"vcomments\"\u003e\u003c/div\u003e \u003cscript\u003e new Valine({ el: '#vcomments', appId: '{% raw %}{{ site.valine.app_id }}{% endraw %}', appKey: '{% raw %}{{ site.valine.app_key }}{% endraw %}', }) \u003c/script\u003e 在需要添加Valine评论的地方添加以下代码，如_layouts/post.html文件 {% raw %}{% if site.valine.enable %} {% include valine.html %} {% endif %}{% endraw %} 至此Valine评论系统配置完毕。打开对应的LeanCloud应用，在【数据存储】-【结构化数据】-【Comment\u003c/\u003e】中可查看和管理所有评论数据。 ","date":"2021-08-28","objectID":"/posts/jekyll-valine/:2:0","tags":["Blog","Valine","Jekyll"],"title":"Jekyll博客中添加Valine评论系统","uri":"/posts/jekyll-valine/"},{"categories":["Blog"],"content":"3 配置Valine邮件提醒功能 参见https://github.com/DesertsP/Valine-Admin ","date":"2021-08-28","objectID":"/posts/jekyll-valine/:3:0","tags":["Blog","Valine","Jekyll"],"title":"Jekyll博客中添加Valine评论系统","uri":"/posts/jekyll-valine/"}]
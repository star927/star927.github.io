[{"categories":["Blog","Notes"],"content":"Notes Note Highlights information that users should take into account, even when skimming. Tip Optional information to help a user be more successful. Important Crucial information necessary for users to succeed. Warning Critical content demanding immediate user attention due to potential risks. Caution Negative potential consequences of an action. ","date":"2024-09-02","objectID":"/posts/markdown/:1:0","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"图片 ![unnamed-2](https://cdn.jsdelivr.net/gh/star927/star927.github.io/assets/img/avatar.png) \u003cimg src=\"https://cdn.jsdelivr.net/gh/star927/star927.github.io/assets/img/avatar.png\" alt=\"unnamed-1\" style=\"zoom:10%;\" /\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/star927/star927.github.io/assets/img/avatar.png\" alt=\"unnamed-1\" width=200 height=200 align=left /\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/star927/star927.github.io/assets/img/avatar.png\" alt=\"unnamed-1\" width=40% /\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/star927/star927.github.io/assets/img/avatar.png\" alt=\"unnamed-2\" style=\"width:40%;\" /\u003e ","date":"2024-09-02","objectID":"/posts/markdown/:1:1","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"TODO List One Two ","date":"2024-09-02","objectID":"/posts/markdown/:1:2","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"特殊符号 HTML Entities Codes © \u0026 ¨ ™ ¡ £ \u0026 \u003c \u003e ¥ € ® ± ¶ § ¦ ¯ « · X² Y³ ¾ ¼ × ÷ » 18ºC \" ' ","date":"2024-09-02","objectID":"/posts/markdown/:1:3","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"Emoji表情 :smiley: Blockquotes :star: GFM task lists \u0026 Emoji \u0026 fontAwesome icon emoji \u0026 editormd logo emoji :editormd-logo-5x: :smiley: @mentions, :smiley: #refs, links, formatting, and tags supported :editormd-logo:; list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; [ ] :smiley: this is a complete item :smiley:; []this is an incomplete item test link :fa-star: @pandao; [ ]this is an incomplete item :fa-star: :fa-gear:; :smiley: this is an incomplete item test link :fa-star: :fa-gear:; :smiley: this is :fa-star: :fa-gear: an incomplete item test link; ","date":"2024-09-02","objectID":"/posts/markdown/:1:4","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"分页符 Page break ","date":"2024-09-02","objectID":"/posts/markdown/:1:5","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"绘制流程图 Flowchart 语法：tag=\u003etype: content:\u003eurl type有六种类型： start(开始)、end(结束)、operation(操作)、subroutine(子程序)、condition(条件)、inputoutput(输入输出) st=\u003estart: Start|past:\u003ehttp://www.baidu.com e=\u003eend: End|future:\u003ehttp://www.baidu.com op1=\u003eoperation: My Operation op2=\u003eoperation: Stuff|current sub1=\u003esubroutine: My Subroutine|invalid cond1=\u003econdition: Yes or No|approved:\u003ehttp://www.google.com cond2=\u003econdition: Good idea|rejected io=\u003einputoutput: catch something...|future st-\u003eop1(right)-\u003econd1 cond1(yes, right)-\u003econd2 cond1(no)-\u003esub1(left)-\u003eop1 cond2(yes)-\u003eio-\u003ee cond2(no)-\u003eop2-\u003ee st=\u003estart: Start|past:\u003ehttp://www.baidu.com e=\u003eend: End|future:\u003ehttp://www.baidu.com op1=\u003eoperation: My Operation op2=\u003eoperation: Stuff|current sub1=\u003esubroutine: My Subroutine|invalid cond1=\u003econdition: Yes or No|approved:\u003ehttp://www.google.com cond2=\u003econdition: Good idea|rejected io=\u003einputoutput: catch something...|future st-\u003eop1(right)-\u003econd1 cond1(yes, right)-\u003econd2 cond1(no)-\u003esub1(left)-\u003eop1 cond2(yes)-\u003eio-\u003ee cond2(no)-\u003eop2-\u003ee ","date":"2024-09-02","objectID":"/posts/markdown/:1:6","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"绘制序列图 Sequence Diagram Andrew-\u003eChina: Says Hello Note right of China: China thinks\\nabout it China--\u003eAndrew: How are you? Andrew-\u003e\u003eChina: I am good thanks! ","date":"2024-09-02","objectID":"/posts/markdown/:1:7","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"甘特图mermaid mermaid 如何在Markdown中画流程图 typora 画流程图、时序图(顺序图)、甘特图 Flowchart Orientation flowchart TB top --\u003e bottom flowchart TB top --\u003e bottomflowchart TD top_down --\u003e same_as_top_to_bottom flowchart TD top_down --\u003e same_as_top_to_bottomflowchart BT bottom --\u003e top flowchart BT bottom --\u003e topflowchart RL right --\u003e left flowchart RL right --\u003e leftflowchart LR left --\u003e right flowchart LR left --\u003e rightNode shapes flowchart TB text \u003c--\u003e id1[Hello\\nWorld!] --\u003e id2(text) --\u003e id3([Hello World!]) id4[[text]] --\u003e id5[(Database)] --\u003e id6((circle)) --\u003e id7\u003etext] id8{text} --\u003e id9{{text}} id10[/text/] --\u003e id11[\\text\\] --\u003e id12[\\text/] --\u003e id13[/text\\] flowchart TB text \u003c--\u003e id1[Hello\\nWorld!] --\u003e id2(text) --\u003e id3([Hello World!]) id4[[text]] --\u003e id5[(Database)] --\u003e id6((circle)) --\u003e id7\u003etext] id8{text} --\u003e id9{{text}} id10[/text/] --\u003e id11[\\text\\] --\u003e id12[\\text/] --\u003e id13[/text\\]Links between nodes flowchart TD A1--\u003eB1 A2---B2 A3-- This is the text! ---B3 A4---|This is the text|B4 A5--\u003e|text|B5 A6-- text --\u003eB6 flowchart TD A1--\u003eB1 A2---B2 A3-- This is the text! ---B3 A4---|This is the text|B4 A5--\u003e|text|B5 A6-- text --\u003eB6flowchart TD A1-.-\u003eB1 A2-. text .-\u003e B2 A3 ==\u003e B3 A4 == text ==\u003e B4 flowchart TD A1-.-\u003eB1 A2-. text .-\u003e B2 A3 ==\u003e B3 A4 == text ==\u003e B4flowchart TD A -- text --\u003e B -- text2 --\u003e C a --\u003e b \u0026 c--\u003e d m \u0026 n--\u003e x \u0026 y flowchart TD A -- text --\u003e B -- text2 --\u003e C a --\u003e b \u0026 c--\u003e d m \u0026 n--\u003e x \u0026 yflowchart TD A1 --o B1 A2 --x B2 A3 o--o B3 A4 \u003c---\u003e B4 A5 x----x B5 flowchart TD A1 --o B1 A2 --x B2 A3 o--o B3 A4 \u003c---\u003e B4 A5 x----x B5Special characters that break syntax flowchart LR id1[\"This is the (text) in the box\"] A[\"A double quote:#quot;\"] --\u003eB[\"A dec char:#9829;\"] flowchart LR id1[\"This is the (text) in the box\"] A[\"A double quote:#quot;\"] --\u003eB[\"A dec char:#9829;\"]Subgraphs flowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end flowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 endflowchart TB c1--\u003ea2 subgraph ide1 [one] a1--\u003ea2 end flowchart TB c1--\u003ea2 subgraph ide1 [one] a1--\u003ea2 endflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 flowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2flowchart LR subgraph TOP direction TB subgraph B1 direction RL i1 --\u003ef1 end subgraph B2 direction BT i2 --\u003ef2 end end A --\u003e TOP --\u003e B B1 --\u003e B2 flowchart LR subgraph TOP direction TB subgraph B1 direction RL i1 --\u003ef1 end subgraph B2 direction BT i2 --\u003ef2 end end A --\u003e TOP --\u003e B B1 --\u003e B2sequenceDiagram par Alice to Bob Alice-\u003e\u003eBob: Go help John and Alice to John Alice-\u003e\u003eJohn: I want this done today par John to Charlie John-\u003e\u003eCharlie: Can we do this today? and John to Diana John-\u003e\u003eDiana: Can you help us today? end end sequenceDiagram par Alice to Bob Alice-\u003e\u003eBob: Go help John and Alice to John Alice-\u003e\u003eJohn: I want this done today par John to Charlie John-\u003e\u003eCharlie: Can we do this today? and John to Diana John-\u003e\u003eDiana: Can you help us today? end end","date":"2024-09-02","objectID":"/posts/markdown/:1:8","tags":["Mac","Notes"],"title":"Text and Typography","uri":"/posts/markdown/"},{"categories":["Blog","Notes"],"content":"简介 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:0","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"基本命令格式 ffmpeg [全局参数] [输入文件参数] -i [输入文件] [输出文件参数] [输出文件] ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:1","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"输出视频信息到文件 ffmpeg -i vedio.mp4 \u003e output.txt 2\u003e\u00261 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:2","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"常见参数 -i: 设定输入流 -v,-loglevel: 设置log等级 -hide_banner: 输出信息中隐藏ffmpeg自身的相关信息 -y: yes -ss: 开始处理的视频时间 -to: 结束处理的视频时间 -t: 处理视频的时间，如果同时使用了参数-to，-t优先级更高 -r: 设定帧速率，默认为25 -s: 设定画面的宽与高 -aspect: 设定画面的比例 -b: 设置平均码率 -b:v: 设定视频平均码率 -c,-codec: 设置编解码器 -c:v,-codec:v,-vcodec: 设置视频编解码器 -c:v:1,-codec:v:1,-vcodec:1: 设置第二个视频流的编解码器 -c copy: 使用原来的编解码器，不重新编解码 -vn: 不处理视频 -vf,-filter:v: 处理视频 在ffmpeg中，v表示视频，a表示音频。比如-v:n表示设置视频编解码器，-v:a表示设置音频解码器 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:3","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"Tips 假如不知道某些参数可以设定成哪些值，有时可以通过随便指定一个值，在ffmpeg的报错信息中就可以看到正确的取值有哪些了，如下 ffmpeg -i test.mp4 -crf 18 -preset anything nothing.mp4 在输出中可以就看到如下信息 Possible presets: ultrafast superfast veryfast faster fast medium slow slower veryslow placebo ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:4","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"参考 ffmpeg Documentation-官网 ffmpeg常用命令-CSDN 使用ffmpeg修改mp3的ID3 tag（添加歌词、专辑等信息） FFmpeg -crf参数优化-腾讯云社区 FFmpeg 视频处理入门教程-阮一峰 FFmpeg 命令示例-知乎 ffmpeg-给视频添加字幕-简书 ffmpeg去除视频黑边命令-CSDN ffmpeg与x264编码指南-CSDN ffmpeg输出信息中个参数的含义-知乎 I帧、P帧、B帧、GOP、IDR 和PTS, DTS之间的关系 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:1:5","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频处理 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:0","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频格式转换 ffmpeg -i input.avi output.mp4 ffmpeg -i input.avi -c:v libx265 output.mp4 ffmpeg -i input.avi -c copy output.mp4 # 只是转一下容器，内部编码格式不变，命令执行速度较快 ffmpeg的输出视频默认使用profile为High的H264视频编码器和profile为LC的AAC音频编码器 H265编码，比H264压缩效率更高，更节省空间，但H265压缩算法编解码更费时，并且兼容性比H264兼容性弱 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:1","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"更改视频分辨率 ffmpeg -i input.mp4 -vf scale=-1:1080 output.mp4 该命令也可以用于拉伸图片 ffmpeg -i input.png -vf scale=1920:1080 output.png ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:2","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"提取音频 ffmpeg -i input.mp4 output.mp3 ffmpeg -i input.mp4 -vn -c:a copy output.aac ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:3","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"提取帧 # 在时间为00:27:10出截图一帧 ffmpeg -ss 00:27:10 -i input.mp4 -vframes 1 output.png ffmpeg -i input.mp4 -ss 00:27:10 -vframes 1 output.png # 从00:27:10开始一直到视频结尾 ffmpeg -i input.mp4 -ss 00:27:10 output.png frame/output-%3d.png # 截取15帧, 放在frame文件夹下 ffmpeg -i input.mp4 -ss 00:27:10 -vframes 15 frame/output-%2d.png # 从00:01:30开始，每秒提取2帧，持续时长00:00:30，共60帧 ffmpeg -i input.mp4 -ss 00:03:00 -r 2 -t 00:00:30 frame/output-%3d.jpg # 整个视频，每分钟提取一帧 ffmpeg -i input.mp4 -r 1/60 frame/output-%3d.png jpg和png都可以作为输出图片的格式，但png的图片更清晰 提取I帧(关键帧) ffmpeg -i input.mp4 -vf select='eq(pict_type\\,I)' -vsync 2 -f image2 frame/output-%03d.png 上述命令是按照顺序对提取的帧进行编号命名。查看上述每帧的在视频中的播放时刻和在视频所有帧中的序号，可使用下述命令 ffprobe input.mp4 -show_entries frame=media_type,pict_type,pts_time -of csv | grep video | grep -n I \u003e ~/Desktop/frames_I.txt media_type: 帧的类型，可能的值是video或audio pict_type: 视频帧的图片类型 pts_time: 帧的播放时刻 grep -n: 以csv文件的形式显示结果，那么一行就是一帧的信息，用grep显示的行号即为该帧在所有帧的序号 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:4","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"更改视频画面长宽比 ffmpeg -i input.mp4 -aspect 16:9 -c copy output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:5","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"设置DAR\\SAR PAR - pixel aspect ratio，单个像素的宽高比 DAR - display aspect ratio，画面显示宽高比 SAR - Sample aspect ratio，采样纵横比， 表示横向的像素点数和纵向的像素点数的比值，即为我们通常提到的分辨率宽高比。就是对图像采集时，横向采集与纵向采集构成的点阵，横向点数与纵向点数的比值。 $PAR\\times SAR = DAR$​ ffmpeg-h -i input.mp4 -vf setsar=sar=1/1,setdar=dar=9/16 output.mp4 ffmpeg-h -i input.mp4 -vf scale=1280:720,setsar=sar=1/1,setdar=dar=16/9 output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:6","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"裁剪画面 ffmpeg -i input.mp4 -vf crop=1200:1600:6:280 output.mp4 crop=width,height,x,y 输出画面宽为width，高为height，x和y是裁剪后的画面左上角第一个像素在原画面中的坐标，例：原始画面1212 × 2160，裁剪后1200 × 1600 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:7","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"旋转与翻转画面 # 顺时针旋转90度 ffmpeg -i input.mp4 -vf \"transpose=1\" output.mp4 # 逆时针旋转90度 ffmpeg -i input.mp4 -vf \"transpose=2\" output.mp4 # 水平翻转 ffmpeg -i input.mp4 -vf hflip output.mp4 # 垂直翻转 ffmpeg -i input.mp4 -vf vflip output.mp4 # 旋转180度，顺时针旋转90度2次 ffmpeg -i input.mp4 -vf \"transpose=1,transpose=1\" output.mp4 上述命令会对视频进行重新编解码，下述命令只是修改视频的rotation属性。用HUAWEI P60 Pro拍摄的视频，不论是横屏拍摄还是竖屏拍摄，通过ffmpeg查看视频的宽和高，可以发现都是横屏视频(宽大于高)，只是竖屏拍摄的视频添加了rotation属性。 # 顺时针旋转90度 ffmpeg-h -display_rotation:0 -90 -i input.mp4 -c copy output.mp4 # 删除视频rotation属性 ffmpeg-h -display_rotation:0 0 -i input.mp4 -c copy output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:8","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频拼接 先创建一个文本文件filelist.txt，按视频拼接顺序以下述格式写下各个视频片段的路径 file 'input-01.mp4' file 'input-02.mp4' 然后执行下述命令 ffmpeg -f concat -safe 0 -i filelist.txt -c copy output.mp4 如果文件名有奇怪的字符，要在filelist.txt中转义 可能会出现报错Unsafe file name，导致命令运行不成功，-safe 0可以避免该问题 上述方法对于所有视频只有一个视频流的情况是支持的。如果参与拼接的视频还存在一个视频流是视频封面，上述方法会失败，可先删除视频封面再进行拼接。 假如有内容上是连续的两个视频片段，前一个视频片段的最后一帧和后一个视频的第一帧是一样的，-c copy拼接出来的视频在该时刻的画面可能会不流畅，此时尝试不使用-c copy参数 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:9","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频截取片段 ffmpeg -i input.mp4 -ss 00:01:00 -t 00:02:30 -c copy output.mp4 ffmpeg -i input.mp4 -t 30 -c copy output.mp4 ffmpeg -i input.mp4 -ss 00:01:00 -to 00:02:30 -c copy output.mp4 -ss放在-i前面运行会更快，把-ss 1:05放到-i前面，与原来的区别是，这样会先跳转到第1:05秒在开始解码输入视频，而原来的会从开始解码，只是丢弃掉前1:05秒的结果。如果将-ss放在-i input.mp4后面则-to的作用就没了，跟-t一样的效果了。 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:10","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频封面 添加封面 下面两个命令都可以给视频添加封面。如果视频原来就有封面，再运行下面两个命令，第一个命令的结果是视频还是原来的封面，并且原封面对应的流的attached_pic属性会变成0；第二个命令的结果是视频显示是新封面，也不会改变原来封面的属性attached_pic的值。 命令ffprobe -show_streams VIDEO_FILE可以查看流的attached_pic值 ffmpeg -i input.mp4 -i input.png -map 0 -map 1 -c copy -disposition:v:1 attached_pic output.mp4 ffmpeg -i input.mp4 -i input.png -map 1 -map 0 -c copy -disposition:0 attached_pic output.mp4 替换封面 例如，通过ffmpeg看到一个视频的信息如下 Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 1920x1080 [SAR 1:1 DAR 16:9], 2041 kb/s, 30 fps, 30 tbr, 90k tbn (default) Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 146 kb/s (default) Stream #0:2[0x0]: Video: png, rgb24(pc, gbr/unknown/unknown), 320x180 [SAR 1:1 DAR 16:9], 90k tbr, 90k tbn (attached pic) 三个数据流依次是视频、音频、封面，替换原来封面使用新封面的命令如下 ffmpeg -i input.mp4 -i input.png -map 0:0 -map 0:1 -map 1 -c copy -disposition:v:1 attached_pic output.mp4 ffmpeg -i input.mp4 -i input.png -map 1 -map 0:0 -map 0:1 -c copy -disposition:0 attached_pic output.mp4 以第一个命令为例 -map 0:0: 表示第一个文件的第一个流，第一个文件就是input.mp4，input.mp4的第一个流就是视频流 -map 0:1: 表示第一个文件的第二个流，也就是文件input.mp4的音频流 -map 1: 表示第二个文件，也就是input.png 上述命令中的-map 0:1可以写成-map 0:a，二者等价（对于该文件而言），都表示音频流。但命令中的-map 0:0不可以写成-map 0:v，因为-map 0:v表示视频流，但是封面也是视频流，既然是替换封面，就应该忽略掉原封面对应的流。 删除封面 例如，通过ffmpeg看到一个视频的信息如下 Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 1920x1080 [SAR 1:1 DAR 16:9], 2041 kb/s, 30 fps, 30 tbr, 90k tbn (default) Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 146 kb/s (default) Stream #0:2[0x0]: Video: png, rgb24(pc, gbr/unknown/unknown), 320x180 [SAR 1:1 DAR 16:9], 90k tbr, 90k tbn (attached pic) 三个数据流依次是视频、音频、封面，下述命令可以删除视频封面，即只保留第一个和第二个数据流： ffmpeg -i input.mp4 -map 0:0 -map 0:1 -c copy output.mp4 下述命令也可删除封面（原理待研究） ffmpeg -i input.mp4 -c copy -map_metadata -1 output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:11","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"音频视频合并 ffmpeg -i video.mp4 -i audio.mp3 -c copy output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:12","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"去除视频某些信息 删除视频章节信息，用ffmpeg查看视频信息，比如结果如下 Chapters: Chapter #0:0: start 0.000000, end 2321.237000 Metadata: title : Stream #0:0[0x1](und): Video: h264 (High) ... Stream #0:1[0x2](und): Audio: aac (HE-AAC) ... Stream #0:2[0x3](eng): Data: bin_data (text / 0x74786574) Metadata: handler_name : SubtitleHandler 其中Chapters就是章节信息，对应handler_name为SubtitleHandler、类型bin_data的Data的这个流。下述信息可以删除章节信息 ffmpeg -i input.mp4 -c copy -map_chapters -1 output.mp4 用ffmpeg查看视频信息时，有的视频除了一个视频流和一个音频流外，还会有第三个流 ffmpeg -i input.mp4 -c copy -map_metadata -1 output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:13","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"更改视频帧率 # 帧率修改为25 ffmpeg -i input.mp4 -r 25 output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:14","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"压缩视频-crf参数 ffmpeg -i test.mp4 -crf 18 test-crf18.mp4 crf这个参数的取值范围为0~51，其中0为无损模式，数值越大，画质越差，生成的文件越小。一般取值在 18 到 28 之间。18往往被认为从视觉上看是无损的，但从技术的角度来讲，它依然是有损压缩。 若crf值加6，输出码率大概减少一半。使用H264编码时crf默认是23；使用H265编码时crf默认是28。 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:15","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"设置视频码率 ffmpeg -i input.mp4 -b:v 2000k output.mp4 ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k output.mp4 ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k -minrate 1800k -maxrate 2200k output.mp4 -b:v主要是控制平均码率 -bufsize用于设置码率控制缓冲器的大小，设置的好处是，让整体的码率更趋近于希望的值，减少波动。（简单来说，比如1 2的平均值是1.5， 1.49 1.51 也是1.5, 当然是第二种比较好） -minrate,-maxrate将视频码率波动控制在一个范围内 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:16","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"设置视频大小 ffmpeg -i input.mp4 -fs 10MB output.mp4 ffmpeg -i input.mp4 -fs 10M output.mp4 ffmpeg -i test.mp4 -fs 5000K output.mp4 ffmpeg -i test.mp4 -fs 5000k output.mp4 # 下述命令报错,改成10M可行 ffmpeg -i input.mp4 -fs 10m output.mp4 fs参数以字节为单位，输出的视频的大小会变成与指定的大小相近 该参数可能会改变视频总帧数。比如原视频是30秒帧率30共900帧，用fs参数压缩后，虽然视频信息显示还是900帧，但实际总帧数小于900帧。（查看视频总帧数用的是下述命令） ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:17","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"preset参数 ffmpeg -i input.mp4 -crf 18 -preset veryslow output.mp4 ffmpeg -i input.mp4 -crf 18 -preset medium output.mp4 ffmpeg -i input.mp4 -crf 18 -preset ultrafast output.mp4 preset参数主要调节编码速度和质量的平衡，编码速度慢会提供更高的压缩效率。有ultrafast、superfast、veryfast、faster、fast、medium、slow、slower、veryslow、placebo这10个选项。缺省值为medium。 与 veryslow相比，placebo以极高的编码时间为代价换取了大概1%的视频质量提升，这是一种收益递减准则，veryslow 与 slower相比提升了3%；slower 与 slow相比提升了5%；slow 与 medium相比提升了5%~10%。有需要的话，一般用veryslow就行，placebo可忽略考虑。 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:18","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"H264编码profile H264有四种画质级别,分别是baseline, extended, main, high: Baseline Profile: 基本画质。支持I/P 帧，只支持无交错（Progressive）和CAVLC。 Extended profile: 进阶画质。支持I/P/B/SP/SI 帧，只支持无交错（Progressive）和CAVLC。(用的少) Main profile: 主流画质。提供I/P/B 帧，支持无交错（Progressive）和交错（Interlaced），也支持CAVLC 和CABAC 的支持。 High profile: 高级画质。在main Profile 的基础上增加了8x8内部预测、自定义量化、 无损视频编码和更多的YUV 格式。 从压缩比例来说，baseline\u003cmain\u003chigh。Baseline profile多应用于实时通信领域，Main profile多应用于流媒体领域，High profile则多应用于广电和存储领域。 ffmpeg -i test.mp4 -c:v libx264 -profile:v baseline test-profile-baseline.mp4 ffmpeg -i test.mp4 -c:v libx264 -profile:v main test-profile-main.mp4 ffmpeg -i test.mp4 -c:v libx264 -profile:v high test-profile-high.mp4 main和high等profile是对于H264编解码器而言的，实际使用中发现ffmpeg默认是使用profile为high的H264，所以上述命令中-c:v libx264其实可以省略。比如，即使是对于一个原编解码器是MPEG4的视频来说，命令ffmpeg -i test.mp4 -profile:v high test-profile-high.mp4是可以正常运行的，输出视频的编解码器是H264，profile是high。 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:19","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频补帧提高帧率 # 前两个命令效果一样 ffmpeg -i input.mp4 -filter_complex \"minterpolate='fps=30'\" output.mp4 ffmpeg -i input.mp4 -vf minterpolate='fps=30' output.mp4 ffmpeg -i input.mp4 -r 30 -vf minterpolate output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:20","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"视频黑边检测 -cropdetect 检测视频黑边 ffmpeg -i test-053.mp4 -t 1 -vf cropdetect=round=2 -f null - ffmpeg -i test-053.mp4 -t 1 -vf cropdetect=limit=24:round=2 -f null - limit默认值24 round默认值是16，round值整除视频宽度和高度。据ffmpeg官网描述，对多数编解码器来说，16是最好的。当然，设置成2，即让视频宽度和高度是2的倍数，也是可以的。 -bbox 检测视频黑边 ffmpeg -i input.mp4 -t 1 -vf bbox -f null - ffmpeg -i input.mp4 -t 1 -vf bbox=16 -f null - 下面是命令运行结果的部分内容 n:23 pts:23000 pts_time:0.766692 x1:648 x2:1271 y1:0 y2:1079 w:624 h:1080 crop=624:1080:648:0 drawbox=648:0:624:1080 n:23: 第23帧 x1,x2,y1,y2: 表示非黑部分左上角和左下角的坐标 crop=a,b,c,d: 可直接用于裁剪视频 Tips 可能会遇到这样的视频，视频左右两边有黑色区域，但是视频中有小的logo一直在整个视频画面中运动（包括黑色区域）。对于黑色区域有小logo的某一帧：参数-vf cropdetect=limit=24可能可以忽略掉小logo的影响，检测出黑色区域；若减小limit值，比如-vf cropdetect=limit=16可能检测出来的非黑色区域就包括了小logo，即检测出来的区域更大。对于该类视频，想忽略掉小logo的影响，调整cropdetect的limit值比用bbox更方便。 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:21","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"黑屏检测 检查视频中纯黑色画面的片段，https://ffmpeg.org/ffmpeg-filters.html#blackdetect ffmpeg -i input.mp4 -vf blackdetect -f null - ffmpeg -i input.mp4 -vf \"blackdetect=d=2:pix_th=0.00\" -f null - black_min_duration, d: 设置黑场时间阈值，只有黑场的连续时间大于门限值才认为是黑场视频。阈值大于等于0，默认2.0。 picture_black_ratio_th, pic_th: 设置黑场的判断阈值，nb_black_pixels/nb_pixels（黑场像素/总像素），该值为百分比，大于等于此阈值认为此帧图片是黑场. 默认值0.98. pixel_black_th, pix_th: 设置黑场像素的判断阈值，默认值0.10。根据此阈值计算绝对阈值，低于绝对阈值的像素认为是黑场像素点。绝对阈值计算公式：$absolute_threshold = luminance_minimum_value + pixel_black_th * luminance_range_size$​ $luminance_range_size$​和$luminance_minimum_value$​ 依赖输入视频的格式, 对于YUV full-range 其范围是 [0-255]，对于YUV non full-range 其范围是 [16-235]; 命令的运行结果示例如下，可以输出检测到的黑屏开始时间、黑屏结束时间、黑屏持续时间 [blackdetect @ 0x600000da4070] black_start:298.266667 black_end:300.7 black_duration:2.433333 [blackdetect @ 0x600000da4070] black_start:589.333333 black_end:601.166667 black_duration:11.833333 [blackdetect @ 0x600000da4070] black_start:893.266667 black_end:901.616667 black_duration:8.35 [blackdetect @ 0x600000da4070] black_start:1193.366667 black_end:1202.116667 black_duration:8.75 [blackdetect @ 0x600000da4070] black_start:1498.65 black_end:1502.55 black_duration:3.9 [blackdetect @ 0x600000da4070] black_start:1792.15 black_end:1803.016667 black_duration:10.866667 [blackdetect @ 0x600000da4070] black_start:2081.05 black_end:2103.266667 black_duration:22.216667 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:22","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"黑帧检测 检测视频的中黑色的帧，https://ffmpeg.org/ffmpeg-filters.html#blackframe ffmpeg -i intput.mp4 -vf blackframe -f null - # 下面三个命令等效 ffmpeg -i intput.mp4 -vf blackframe=98:32 -f null - ffmpeg -i intput.mp4 -vf blackframe=amount=98:threshold=32 -f null - ffmpeg -i intput.mp4 -vf blackframe=amount=98:thresh=32 -f null - amount: 黑色像素比例高于等于该值被视作是黑帧 threshold, thresh: 像素值低于该值的被视为黑色像素 命令运行结果示例如下， [Parsed_blackframe_0 @ 0x600001be0000] frame:1 pblack:100 pts:400 t:0.034734 type:B last_keyframe:0 [Parsed_blackframe_0 @ 0x600001be0000] frame:2 pblack:100 pts:800 t:0.069469 type:P last_keyframe:0 [Parsed_blackframe_0 @ 0x600001be0000] frame:8586 pblack:100 pts:3434400 t:298.228552 type:B last_keyframe:8421 [Parsed_blackframe_0 @ 0x600001be0000] frame:8587 pblack:100 pts:3434800 t:298.263286 type:P last_keyframe:8421 书序信息分别表示：帧序号、黑色像素占比、时间戳、时间(秒)、帧类型、当前gop的idr帧的位置 通过ffprobe -show_streams查看视频流信息，可以看到time_base；通过ffprobe -show_frames查看帧信息，可以看到pts和pts_time；三者之间的关系是：$pts_time=pts*time_base$，上述输出信息中的t就是pts_time ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:23","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"metadata https://ffmpeg.org/ffmpeg-filters.html#metadata_002c-ametadata 下述命令实现了提取视频第一个非黑色的帧（可用于视频的缩略图） ffmpeg -i input.mp4 -vf \"blackframe=0,metadata=select:key=lavfi.blackframe.pblack:value=50:function=less\" -vframes 1 -f image2 out.png blackframe=0: 黑色像素比例大于0的帧，即所有帧 metadata=select:key=lavfi.blackframe.pblack:value=50:function=less: 选择pblack小于50的帧，即黑色像素占比低于50的帧 -vframes 1: 只输出符合要求的第一帧 即上述命令的含义就是输出所有帧中第一个黑色像素占比低于50的帧 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:24","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"图片合成视频 ffmpeg -r 1 -f image2 -i img-%2d.jpg output.mp4 图片命令的序号必须连续 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:2:25","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"音频处理 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:0","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"导出音频信息 ffmpeg -i input.mp3 -f ffmetadata output.txt ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:1","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"修改音频信息 # 修改title, 删除album, 其他不变 ffmpeg -i input.mp3 -metadata title=\"new title\" -metadata album=\"\" -c copy output.mp3 ffmpeg -i input.mp3 -metadata title=new-title -metadata album= output.mp3 # 删除所有信息(metadata) ffmpeg -i input.mp3 -map_metadata -1 output.mp3 # 删除所有信息(metadata), 仅设置title ffmpeg -i input.mp3 -map_metadata -1 -metadata title=new-title output.mp3 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:2","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"压缩音频 ffmpeg -i input.mp3 -ab 24k -ar 16k output.mp3 -ab: 等同于-b:v，设置码率 -ar: 设置音频采样速率 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:3","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"查看音量 ffmpeg -i input.mp4 -af volumedetect -f null - 上述命令的运行结果的其中两行信息如下，分别表示平均音量和最大音量 [Parsed_volumedetect_0 @ 0x6000025e9b80] mean_volume: -38.7 dB [Parsed_volumedetect_0 @ 0x6000025e9b80] max_volume: -10.1 dB ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:4","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"调整音量 # 音量调大10分贝 ffmpeg -i input.mp4 -c:v copy -af \"volume=10dB\" output.mp4 # 音量调小5分贝 ffmpeg -i input.mp4 -c:v copy -af \"volume=-5dB\" output.mp4 # 音量调为150% ffmpeg -i input.mp4 -c:v copy -af \"volume=1.5\" output.mp4 # 音量调为80% ffmpeg -i input.mp4 -c:v copy -af \"volume=0.8\" output.mp4 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:5","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"绘制音量波形图 https://ffmpeg.org/ffmpeg-filters.html#showwavespic ffmpeg -i input.mp4 -filter_complex \"showwavespic=s=600x240:scale=3\" -vframes 1 output.png s: 指定图片大小，默认是600x240 scale: 设置音量振幅放缩比例，范围是[0-3] ","date":"2023-05-03","objectID":"/posts/ffmpeg/:3:6","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"ffprobe ","date":"2023-05-03","objectID":"/posts/ffmpeg/:4:0","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"简介 ffprobe 是ffmpeg的一个工具包，主要用于探测音视频文件的各种信息 参考： ffprobe Documentation-官网 ffprobe 使用小结-简书 FFmpeg之ffprobe-掘金 ffprobe输出元数据参数解析-博客园 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:4:1","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"参数介绍 # 下述两个命令等效，输出信息类似于: ffmpeg -i input.mp4 ffprobe input.mp4 ffprobe -i input.mp4 -show_format 查看容器格式相关信息 ffprobe -show_format input.mp4 -show_streams 查看流信息 ffprobe -show_streams input.mp4 -show_frames 查看帧信息 -show_entries 设置只输出指定条目 # 只输出下述四项 # -show_format中的bit_rate,duration # -show_streams中的codec_type,codec_name,bit_rate # -show_streams中的tags # -show_streams中的disposition中的attached_pic ffprobe -v error -show_entries format=bit_rate,duration:stream=codec_type,codec_name,bit_rate:stream_tags:stream_disposition=attached_pic input.mp4 -output_format, -of: 设置输出格式 例如 ffprobe -v error -show_entries format=bit_rate,duration test.mp4 输出如下 [FORMAT] duration=30.000181 bit_rate=13020820 [/FORMAT] 那么，下述命令及其输出如下 ffprobe -v error -show_entries format=bit_rate,duration -output_format default=noprint_wrappers=1 test.mp4 duration=30.000181 bit_rate=13020820 ffprobe -v error -show_entries format=bit_rate,duration -of default=nokey=1 test.mp4 [FORMAT] 30.000181 13020820 [/FORMAT] 同时设置nokey和noprint_wrappers的命令如下 ffprobe -v error -show_entries format=bit_rate,duration -of default=nokey=1:noprint_wrappers=1 test.mp4 等价于下述命令，nokey简写nk，noprint_wrappers简写nw ffprobe -v error -show_entries format=bit_rate,duration -of default=nk=1:nw=1 test.mp4 亦可指定输出格式，以json格式输出的命令如下 ffprobe -v error -show_entries format=bit_rate,duration -of json test.mp4 -select_streams 输出指定流的信息 # 音频流 ffprobe -v error -show_streams -select_streams a test.mp4 # 视频流 ffprobe -v error -show_streams -select_streams v test.mp4 # 第一个视频流 ffprobe -v error -show_streams -select_streams v:0 test.mp4 # 第二个视频流 ffprobe -v error -show_streams -select_streams v:1 test.mp4 # 第二个流 ffprobe -v error -show_streams -select_streams 1 test.mp4 -count_frames 计算每个流的帧数，并在相应的流部分中报告 例如，视频总帧数命令如下 ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames test.mp4 不指定参数-select_streams时，nb_read_frames是N/A ","date":"2023-05-03","objectID":"/posts/ffmpeg/:4:2","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"小结 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:5:0","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"压缩视频 降低分辨率 降低帧率 用crf参数进行压缩 非H264的视频，可考虑改成H264，H264压缩可能比原编解码器更高 更改H264格式视频的profile，从压缩比例来说，baseline\u003cmain\u003chigh 使用H265编码，比H264压缩效率更高，但需要考虑兼容性，H264兼容性更高 ","date":"2023-05-03","objectID":"/posts/ffmpeg/:5:1","tags":["FFmpeg","Notes"],"title":"FFmpeg Notes","uri":"/posts/ffmpeg/"},{"categories":["Blog","Notes"],"content":"Tips ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Homebrew brew是mac系统中程序包的管理程序，通过brew安装的程序默认都是/opt/homebrew/Cellar下，然后在/opt/homebrew/bin下创建对应的软链接来使用的。用官网的命令安装失败，可参见清华源官网安装方法。 Homebrew/Linuxbrew 镜像使用帮助：https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/ Homebrew-bottles 镜像使用帮助：https://mirrors.tuna.tsinghua.edu.cn/help/homebrew-bottles/ 临时使用: export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles 常用命令 brew update brew install packageName1 packageName2 brew uninstall packageName brew remove packageName brew list brew info packageName brew search packageName brew outdated 查看可升级的包 brew upgrade packageName 升级某一个包，后面不接包名则升级所有包 brew cleanup -n 查看可清除的软件和可升级的软件 brew cleanup 清除所有老版本的软件及一些无用软链接等 brew link packageName 给对应软件创建软链接 brew leaves 列出所有没有依赖其他包的已安装软件包 brew deps packageName 查看该包所依赖的包，可选参数–tree brew uses –installed packageName 查看该包被哪些已安装的包所依赖 Homebrew相关命令：Mac软件包管理神器Homebrew brew-cask： https://github.com/Homebrew/homebrew-cask https://github.com/buo/homebrew-cask-upgrade ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"软件数据缓存路径 ~/Library/Containers ~/Library/Application Support /Library/Application Support ~/Library/LaunchAgents /Library/LaunchAgents /Library/StartupItems ~/Library/Caches 微信文件缓存路径：/Users/star/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/8734c5845659e8690499560d9ae8b641/Message/MessageTemp ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"启动台 已安装应用启动台不显示 defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock 这将回到MacOS应用图标默认布局，比如原来归类好的图标整理，执行后，会全部打乱，但是之前不出现的APP应用，现在可以显示了。 启动台有残留图标 defaults write com.apple.dock ResetLasunchPad -bool true; killall Dock 应用程序卸载后，启动台中仍有残留图标，无法移动到废纸篓，可使用该命令。 重置启动台 defaults delete com.apple.dock; killall Dock 此命令也会重置触发角 ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"环境变量 shell类型 交互式Shell：用户通过终端与Shell直接交互，输入命令并立即获得反馈。 非交互式Shell：Shell在没有用户直接交互的情况下运行，通常用于脚本执行。比如通过sh命令执行脚本 登录Shell，当用户通过终端或远程连接（如 SSH）登录系统时启动的Shell。终端新建标签页也是一个新的登录shell 非登录式Shell：在用户已经登录系统后，通过终端或图形界面启动的Shell。比如在当前终端窗口通过zsh等命令打开的终端 终端配置文件 /etc/zprofile：系统范围的登录shell设置，仅在登录shell会话中加载。 /etc/zshrc：系统范围的交互式shell设置，对所有用户的交互式shell会话都有效。 ~/.zprofile：用户级登录shell设置，当前用户每次启动一个新的登录shell时加载。 ~/.zshrc：用户级交互式shell设置，当前用户每次启动一个新的交互式shell时加载。 通常只对~/.zprofile和~/.zshrc做些修改，当打开一个登录交互式shell（比如新的终端窗口或标签页），先加载~/.zprofile后加载~/.zshrc。同一环境变量，被多次设置，以最后一次设置的值为准。 Important 比如~/.zprofile文件中其中一行命令是export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"，现在将这一行注释掉，不新建终端窗口而是运行source ~/.zprofile，效果是当前终端窗口把~/.zprofile中的命令在当前环境下再运行一遍，所以PATH变量中依旧在路径/opt/homebrew/opt/llvm/bin。所以此时应该新建窗口而不是运行source命令。 常见环境变量 PATH：该变量指定了可执行文件的搜索路径。比如运行命令make，系统会依次从PATH变量指定的路径中搜索可执行文件make，直到找到第一个名为make的可执行文件。现安装了新版本的make，路径是/opt/homebrew/opt/make/libexec/gnubin，可在终端配置文件（如zsh的~/.zprofile）添加export PATH=\"/opt/homebrew/opt/make/libexec/gnubin:$PATH\"，也就是将该路径放到原PATH变量的前面，这样之后运行make命令是自己安装的新版本的make。 通常运行完brew install命令或者运行brew info命令，在输出结果中有时可以看到有提示需要某些路径添加到PATH变量中。也有些软件会自动在PATH中的某个路径中创建相关可执行文件的软链接，不需要再修改PATH变量了。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:4","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"创建Unix可执行文件 如创建一个无后缀文件~/my-test，在终端执行完命令sudo chmod u+x ~/my-test后，my-test文件就变成了Unix可执行文件类型（可用文本编辑器进行编辑）。 若在命令行运行my-test命令，需带上my-test命令的文件路径；即使my-test在当前文件夹下，直接执行命令my-test也没有用。 test是shell内置命令，测试自己创建的Unix文件时，最好不要用test来命名 为了可以直接在终端执行命令my-test，可以将my-test放到/usr/local/bin等文件夹下；当然，可以创建一个文件夹专门来存放自定义的Unix可执行文件，如~/diy_bin，那么只需在文件~/.zprofile里添加一行export PATH=~/diy_bin:$PATH，所有自定义的命令就可以直接在命令行使用了 实例：自定义以实现快捷激活Python虚拟环境 Python使用虚拟环境见使用虚拟环境 方便起见，可以将所有创建的Python虚拟环境放在文件夹~/.venv下，那么激活名称为venv-name的虚拟环境的命令就是source ~/.venv/venv-name/bin/activate，该命令稍显复杂，下面用更简洁的命令实现激活虚拟环境 创建一个无后缀文件，并不需要，如起名为activate-venv，写入以下内容： source ~/.venv/${1}/bin/activate 此后，需要激活名称为venv-name的虚拟环境执行命令source activate-venv venv-name就可以。（当然，如果activate-venv文件不在当前文件夹目录下，将命令中的activate-venv改成其文件路径即可，例source ~/activate-venv venv-name） 附加说明： 一个最直接的想法是执行命令sudo chmod u+x ~/activate-venv，将其变成Unix可执行文件类型，那么在命令行执行命令activate-venv venv-name就可以激活对应的虚拟环境。 但是实际发现操作发现这样并不能达到预期的效果，原因大致可描述为：执行命令activate-venv venv-name后，系统相当于是后台创建了一个新的命令行窗口，在该命令行窗口执行完activate-venv venv-name所有内容后，将该窗口关闭，所以当前我们所在的窗口看不到命令执行的效果。 可以创建一个Unix可执行文件my-test，写入以下内容： cd ~/Python open . echo `pwd` 在终端执行命令my-test，会发现~/Python文件夹在访达中被打开，终端输出了/Users/star/Python，但是终端的文件路径并没有切换到~/Python；所以其实相当于是系统在后台新建的一个窗口里执行了命令my-test，只是把一些打印信息和一些实际性的操作（如open）呈现给用户。 所以执行命令activate-venv venv-name相当于系统在后台一个窗口激活了venv-name虚拟环境，命令执行完后关闭了，用户所在的命令行里也就看不到venv-name被激活。 因此，可以采用source self-defined-command parameters的方式来实现预期的效果 参考：Bash技巧：一个在不同目录之间直接来回快速 cd 的Shell脚本 ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:5","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"url文件 创建一个后缀为.url的文本文件，写入以下内容： [InternetShortcut] URL=https://en.wikipedia.org/wiki/URL Caution 在命令行open -e file.url命令可以用文本编辑器打开url文件，但是比如url文件中的内容如下 [InternetShortcut] URL= 此时用open命令打开url文件会报错 ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:6","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"librsvg brew install librsvg rsvg-convert in.svg --page-height 512 --page-width 512 -h 512 --left 45 -b white -o out.png rsvg-convert in.svg -f pdf -o out.pdf ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:7","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"icns 在访达中选择一个应用，右键显示包内容，进入Contents/Resources/文件夹，即可看到该软件相关的icns文件。用预览打开icns文件，可导出成png等格式。下面是制作icns文件的过程 sips -z 16 16 icns.png --out temp.iconset/icon_16x16.png sips -z 32 32 icns.png --out temp.iconset/icon_32x32.png sips -z 128 128 icns.png --out temp.iconset/icon_128x128.png sips -z 256 256 icns.png --out temp.iconset/icon_256x256.png sips -z 512 512 icns.png --out temp.iconset/icon_512x512.png sips -z 32 32 icns.png --out temp.iconset/icon_16x16@2x.png sips -z 64 64 icns.png --out temp.iconset/icon_32x32@2x.png sips -z 256 256 icns.png --out temp.iconset/icon_128x128@2x.png sips -z 512 512 icns.png --out temp.iconset/icon_256x256@2x.png sips -z 1024 1024 icns.png --out temp.iconset/icon_512x512@2x.png iconutil -c icns temp.iconset -o icns.icns 文件夹必须带.iconset后缀，文件夹下的文件名也必须是icon，文件夹必须在执行命令前创建好 关闭该应用，将应用从原文件夹中移出再打开，然后移回原文件夹后在打开，最后重启“访达”即可 https://www.macappbox.com/a/400.html https://stackoverflow.com/questions/31632304/iconseterror-failed-to-generate-icns ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:8","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"推出U盘 磁盘“SanDisk”没有被推出，因为一个或多个程序可能正在使用它。 官方方法：退出登录、关机。时间成本更高，可先尝试下述方法。 解决步骤：先确定使用该磁盘的进程，退出该进程再尝试推出U盘 方法一：使用命令lsof，如下，可看到使用U盘的进程的PID star@MacBookAir: ~/Downloads/Movies/temp $ lsof /Volumes/SanDisk COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME QuickLook 632 star 3r REG 1,21 904373191 280781 /Volumes/SanDisk/Movies/test.mp4 方法二：先使用df -lh查看U盘的盘符，再使用diskutil umount推出U盘即可看到正在使用该U盘的进程的PID star@MacBookAir: ~/Downloads/Movies/temp $ df -lh Filesystem Size Used Avail Capacity iused ifree %iused Mounted on ... /dev/disk4s1 117Gi 113Gi 3.6Gi 97% 1 0 100% /Volumes/SanDisk star@MacBookAir: ~/Downloads/Movies/temp $ diskutil umount /dev/disk4s1 Volume SanDisk on disk4s1 failed to unmount: dissented by PID 632 (/System/Library/Frameworks/QuickLookUI.framework/Versions/A/XPCServices/QuickLookUIService.xpc/Contents/MacOS/QuickLookUIService) Dissenter parent PPID 1 (/sbin/launchd) 可能用上述两个方法并没有发现有进程使用U盘，那就重启电脑后再推出U盘。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:9","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"查看文件是否正在被使用 Note 该小节所说的文件是不仅仅指的是普通文件，也包括目录、套接字文件、字符设备、块设备等特殊文件，是一个更广泛的概念 lsof和fuser lsof和fuser都可以查看文件是否正在使用，但有一定的局限性。比如文件/tmp/my_unix_socket的真实路径是/private/tmp/my_unix_socket，用lsof和fuser可以看出/tmp/my_unix_socket正在使用，但不能看出/private/tmp/my_unix_socket正在使用中，如下： star@MacBook-Air: ~ $ lsof /tmp/my_unix_socket COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME socket_un 10413 star 3u unix 0x8c48f298d8f4ebca 0t0 /tmp/my_unix_socket star@MacBook-Air: ~ $ lsof /private/tmp/my_unix_socket star@MacBook-Air: ~ $ fuser /tmp/my_unix_socket /tmp/my_unix_socket: 10413 star@MacBook-Air: ~ $ fuser /private/tmp/my_unix_socket /private/tmp/my_unix_socket: psutil def is_path_in_use(path): for proc in psutil.process_iter(attrs=[\"pid\", \"name\"]): try: for file in proc.open_files(): if file.path == path: return True except ... 以Google Chrome进程为例，可以使用lsof \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"命令或者活动监视器APP来查看PID。运行lsof -p PID命令可看到结果有几百项，用psutil的open_file()函数可以获得一个包含文件的FD和NAME的列表，将lsof和open_file()的结果中FD和NAME一样的条目视为同一项，（lsof的FD可能会尾随一个字母，写程序对比结果时需注意）可以发现： ope_file()函数获得的文件列表是lsof结果的真子集 lsof命令的结果包含的列有COMMAND,PID,USER,FD,TYPE,DEVICE,SIZE/OFF,NODE,NAME，其中TYPE即为文件的类型。open_file()函数得到所有文件，参照lsof的结果，这些文件的类型都是REG，即普通文件，但并不包含lsof结果中的所有REG类型的文件。open_file()函数的官方文档的描述是Return regular files opened by process as a list...，这里提到的是regular files，而lsof也恰好显示open_file()所列文件的类型都是REG。 fcntl def is_path_in_use(path): try: with open(path, \"r\") as file: # open 函数不支持打开 socket 等特殊类型的文件 fcntl.flock(file, fcntl.LOCK_EX | fcntl.LOCK_NB) # 尝试获取独占锁 fcntl.flock(file, fcntl.LOCK_UN) # 如果成功，释放锁 return False # 文件未被使用 except ... 不同方法对比 下面是几种正在使用中的文件，不同方法判断出来的结果 正在使用中文件 lsof psutil fcntl 一个socket类型的文件，使用Unix域socket通信的进程运行时使用的就是该类文件 True False False 一个可执行文件 True False False 一个普通文件，正在用Python的open函数打开 True True False 小结 用Python判断路径是否在使用中最好的方法是使用lsof命令: def is_path_in_use(path): return os.popen(f\"lsof '{path}'\").read() != \"\" ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:10","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"xcode命令行工具 查看版本 pkgutil --pkg-info=com.apple.pkg.CLTools_Executables ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:11","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"curl: (7) Failed to connect curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 12 ms: Couldn't connect to server 出现该类问题，可以在/etc/hosts文件中添加对应域名的ip地址。例如https://ip.chinaz.com/等网站可以查询出域名raw.githubusercontent.com的IP地址其中一个是185.199.110.133，那么在/etc/hosts文件中添加以下内容即可 185.199.110.133 raw.githubusercontent.com ","date":"2023-05-03","objectID":"/posts/mac-notes/:1:12","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Terminal Configuration ","date":"2023-05-03","objectID":"/posts/mac-notes/:2:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"设置主题 新建一个主题 背景：#300A24,#2C001E 字体：Menlo Regular 13 文本： 使用粗体字 允许闪动文本 显示ANSI颜色 对粗体文本使用亮丽颜色 文本：#FFFFFF 粗体文本：#FFFFFF 所选内容：钨黑#424242 光标： 竖条 闪动光标 ANSI颜色 蓝色，标准：浅蓝色#0096FF，明亮：浅蓝色#0096FF ","date":"2023-05-03","objectID":"/posts/mac-notes/:2:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"zsh 配置文件：~/.zshrc 修改不同类型文件的颜色 export LS_OPTIONS=\"--color=auto\" # 如果没有指定，则自动选择颜色 export CLICOLOR=1 #是否输出颜色 export LSCOLORS=\"ExGxFxdaCxDaDahbadecex\" #指定颜色 LSCOLORS 变量由22个字母组成，每2个一组，分别代表一种文件类型的文字颜色和背景颜色。这11种文件类型分别为： directory（文件夹） symbolic link（链接文件） socket pipe executable（可执行文件） block special character special executable with setuid bit set executable with setgid bit set directory writable to others, with sticky bit directory writable to others, without sticky bit 具体的颜色代码为： A 粗体黑色 B 粗体红色 C 粗体绿色 D 粗体棕色 E 粗体蓝色 F 粗体洋红色 G 粗体青色 H 粗体浅灰色 a 黑色 b 红色 c 绿色 d 棕色 e 蓝色 f 洋红色 g 青色 h 浅灰色 x 默认颜色 Mac上LSCOLORS默认值是exfxcxdxbxegedabagacad，参见：https://apple.stackexchange.com/questions/357353/lscolors-and-clicolor-active-by-default-and-unset 修改提示符的颜色 export PROMPT=\"%F{green}%B%n@%m: %F{blue}%~ %f%b$ \" 重启终端，现在的效果：star@MacBookPro: ~/Downloads $ %n：用户名，即star@MacBookPro: ~/Downloads $ % 中的star部分； %m：电脑名称，即star@MacBookPro: ~/Downloads $中的MacBookPro部分； %~：当前文件夹路径名，%~会显示完整路径名，%3~则只会显示三层父级文件路径 %F{color}：设置颜色，color可以是颜色名称，也可以是0~255区间的数字，对应shell中256配色表 %B：粗体 %f：恢复默认颜色 %b：字体恢复正常宽度 另外PROMPT中%n %m %~的顺序及出现次数都可自行设置，删除亦可，PROMPT中可以自行修改和添加字符 参考： macOS 修改终端Terminal的颜色设置 让MacOS的终端靓起来，给MacOS终端CLI添加颜色 自定义 zsh 提示（配置PROMPT或PS1） Prompt Expansion 教你写一个 Zsh 主题 ","date":"2023-05-03","objectID":"/posts/mac-notes/:2:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"其它配置 alias shell built-in command 可利用alias，自定义指令的别名。若仅输入alias，则可列出目前所有的别名设置。alias命令直接在命令行运行，效果仅生效于该终端窗口，若要每次打开终端都生效，可将命令写入~/.zprofile等文件中。示例 alias gcc='gcc-10' alias g++='g++-10' alias ffmpeg-h='ffmpeg -hide_banner' alias ffprobe-h='ffprobe -hide_banner' ","date":"2023-05-03","objectID":"/posts/mac-notes/:2:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Terminal Command 参考：https://www.runoob.com/linux/linux-command-manual.html ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"grep grep [options] pattern [files] # 多个条件，或 grep \"word1\\|word2\" grep -E \"word1|word2\" # 多个条件，且。本质是运行两次grep命令，比如添加参数-n，后一个grep匹配的行号是基于第一个grep命令的结果 grep word1 | grep word2 # 排除文件夹 grep --exclude-dir ~/Typora/Notes -rn 链接 ~/Typora -i: 忽略大小写进行匹配 -v: 反向查找，只打印不匹配的行 -n: 显示匹配行的行号 -r: 递归查找子目录中的文件 -l: 只打印匹配的文件名 -c: 只打印匹配的行数 -w : 只显示全字符合的列 -E: 正则表达式 --exclude-dir: 排除文件夹 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"find # 当前文件夹下查找包含test的文件 find . -name \"*test*\" # 在~路径下搜索，不在~/Library和~/.Trash中搜索。但搜索结果中会包含~/Library和~/.Trash这两项 find ~ -path ~/Library -prune -o -path ~/.Trash -prune -o -type f -name \".DS_Store\" \u003e ~/Desktop/draft.txt -iname: 忽略大小写 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"ps ps # 默认只列出当前用户的由终端控制的进程 -a # 其他用户的进程也会列出 -x # 不由终端控制的进程也会列出 -A # 其他用户的进程也会列出，包括由终端终止的进程 -e # 等同于 -A -f # 会打印每个进程更多的信息 -o # 指定输出格式 -u # 只列出指定用户的进程 u # 会打印每个进程更多的信息, UID以用户名的方式显示，而不是数字 # 组合用法举例 ps aux ps -ef ps -eo uid,pid,stat,command # 对于 Mac, ps -aux 命令会报错, 在 Ubuntu 上 ps aux 与 ps -aux 都可以 https://www.runoob.com/linux/linux-comm-ps.html https://www.cnblogs.com/programmer-tlh/p/11593330.html ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"ioreg 查询macbook pro电池的设计容量、当前可用容量、电池损耗情况、当前电量等信息： ioreg -rn AppleSmartBattery | grep -i capacity ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:4","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"diskutil diskutil list # 查看所有磁盘信息 sudo diskutil umountDisk /dev/diskN # 取消U盘挂载 sudo diskutil zeroDisk /dev/diskN # 使用0覆盖所有扇区 sudo diskutil eraseDisk ExFAT ud /dev/disk3 # 格式化为ExFAT格式的名叫ud的新U盘 https://blog.csdn.net/chenhao_c_h/article/details/102552874 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:5","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"zip/unzip zip -rv test.zip test -r: 递归处理。如果要压缩的是一个文件夹，没有加该参数则压缩的只是该文件夹中的文件，不包含子文件中的文件 -v: 显示压缩过程中的更详细的一些信息 unzip test.zip -d 123 unzip -v test.zip -d: 指定解压后的文件所在的目录 -v: 查看压缩包，不解压 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:6","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"du 查看文件夹或文件的大小 du -h -d 1 . du -sh # 等效于 du -s -h -h: 以K\\M\\G结尾显示文件大小 -d: 指定文件夹深度，默认显示该文件夹中所有子文件的大小 -a: 显示所有文件夹和文件的大小，默认只显示文件夹的大小 -s: 只显示文件夹总的大小，与-d 0效果一致 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:7","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"ipcs/ipcrm 查看/删除系统消息队列、共享内存、信号量等信息 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:8","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"paste 实现行对行的合并文件，效果如下 star@MacBookAir: ~/Desktop $ cat file1.txt a b c star@MacBookAir: ~/Desktop $ cat file2.txt 1 2 star@MacBookAir: ~/Desktop $ paste -d , file1.txt file2.txt a,1 b,2 c star@MacBookAir: ~/Desktop $ paste -s file1.txt file2.txt a b c 1 2 -d: 间隔字符，默认是tab键\\t ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:9","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"cut 提取文件每行指定内功，如下 star@MacBookAir: ~/Desktop $ cat test.txt 2308:frame,1,30.000000,I 2769:frame,1,36.000000,I star@MacBookAir: ~/Desktop $ cat test.txt | cut -d , -f 1 -f 3 2308,30.000000 2769,36.000000 star@MacBookAir: ~/Desktop $ cat test.txt | cut -d , -f -3 2308:frame,1,30.000000 2769:frame,1,36.000000 star@MacBookAir: ~/Desktop $ cat test.txt | cut -d , -f 3- 30.000000,I 36.000000,I star@MacBookAir: ~/Desktop $ cat test.txt | cut -d , -f 2,3 1,30.000000 1,36.000000 test.txt | cut -c 4 # 第4个字符 test.txt | cut -c -4 # 前4个字符 test.txt | cut -c 4- # 第4个至最后一个字符 test.txt | cut -c 4-10 # 第4到第10个字符 # -d参数同理 -d,-f: 两者需搭配使用，-d指定分割符，-f指定显示分割后哪几列 -c: 按字符进行提取 -d: 按字节进行提取 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:10","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"inode相关 ls -i: 可以查看文件inode值和链接数 stat: 查看文件inode内容 star@MacBook-Air: ~/Downloads/test $ ls -li total 24 4669683 -rw-r--r-- 2 star staff 6 4 27 16:57 test-hard-link.txt 4670725 lrwxr-xr-x 1 star staff 10 4 27 16:57 test-soft-link.txt -\u003e ./test.txt 4669683 -rw-r--r-- 2 star staff 6 4 27 16:57 test.txt 4669461 -rw-r--r--@ 1 star staff 868 4 27 16:51 test.txt的替身 # 分别表示: inode, 权限, 链接数 star@MacBook-Air: ~/Downloads/test $ stat test.txt 16777234 4669683 -rw-r--r-- 2 star staff 0 6 \"Apr 27 16:57:55 2024\" \"Apr 27 16:57:53 2024\" \"Apr 27 16:57:53 2024\" \"Apr 27 16:51:19 2024\" 4096 8 0 test.txt star@MacBook-Air: ~/Downloads/test $ stat -s test.txt st_dev=16777234 st_ino=4669683 st_mode=0100644 st_nlink=2 st_uid=501 st_gid=20 st_rdev=0 st_size=6 st_atime=1714208275 st_mtime=1714208273 st_ctime=1714208273 st_birthtime=1714207879 st_blksize=4096 st_blocks=8 st_flags=0 star@MacBook-Air: ~/Downloads/test $ stat -x test.txt File: \"test.txt\" Size: 6 FileType: Regular File Mode: (0644/-rw-r--r--) Uid: ( 501/ star) Gid: ( 20/ staff) Device: 1,18 Inode: 4669683 Links: 2 Access: Sat Apr 27 16:57:55 2024 Modify: Sat Apr 27 16:57:53 2024 Change: Sat Apr 27 16:57:53 2024 Birth: Sat Apr 27 16:51:19 2024 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:11","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"chflags # 隐藏文件或目录 chflags hidden /path/to/your/file_or_directory # 取消隐藏文件或目录 chflags nohidden /path/to/your/file_or_directory ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:12","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"lsof lsof -i:8080 # 查看端口8080的使用情况 lsof -p PID # 列出指定进程ID（PID）打开的文件 lsof /path/to/file # 列出打开指定文件的进程 lsof -c \"string\" # 列出包含指定字符串的进程打开的文件 ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:13","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"xargs # 前一个命令的输出，作为后一个命令的输入，这时需要用到 xargs # 对于前一个命令的输出结果，xargs 默认使用空格和换行符作为分隔符，分割后的各项作为后一个命令的输出 find . -name \"*.md\" | xargs ls -l # 例如 find 查找出来的各个结果中可能含有空格, 下面这个命令才能达到预期效果 # -print0 表示使用各项分隔符是空字符(ASCII NUL character \\0)而不是换行符 # xargs -0 表示 xargs 将使用空字符\\0作为分隔符 # -print0 和 xargs -0 通常一起使用，如果不想空格被视作分隔符的话 find . -name \"*.md\" -print0 | xargs -0 ls -l ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:14","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"env/printenv # 列出当前会话中所有的环境变量及其值 env # 临时将VAR变量的值设置为value，然后执行command命令。 env VAR=value command # 列出当前会话中所有的环境变量及其值 printenv # 只输出自定环境变量的值。 printenv PATH ","date":"2023-05-03","objectID":"/posts/mac-notes/:3:15","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Python ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Pypi 基本使用 pip配置文件的路径：~/.config/pip/pip.conf 清华pypi 镜像使用帮助：https://mirrors.tuna.tsinghua.edu.cn/help/pypi/。临时使用： pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 设置为默认源，执行下述命令： pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 该命令会在文件~/.config/pip/pip.conf中写入下述内容： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple 常用命令 pip install packageName1 packageName2 pip install -r requirements.txt 将需安装的包写入一个txt文件，亦可同时安装多个包 pip uninstall packageName pip show packageName 显示包的信息 pip list pip list –outdated 可更新的包 pip install –upgrade packageName1 packageName2 更新包 pip freeze 列出安装的第三方库 pip show packageName 查看已安装包的信息 删除所有第三方安装包，可用以下方法 pip freeze \u003e packages.txt pip uninstall -r packages.txt -y 参数-y表示默认全部同意，不加该参数则每删除一个包都需要输入一次y pip-autoremove pip install pip-autoremove 例如pip unistall jupyter命令只会删除jupyter这一个包；而pip-autoremove jupyter命令则可以删除jupyter相关的所有包，删除更彻底。 pipdeptree pip install pipdeptree 用于查看已安装包之间的依赖关系 # 以树状结构的形式列出所有已安装包之间的关系。会重复显示很多内容，比如A依赖B，B依赖一些包，C也依赖B，那么以B为根节点的这个子树既会显示在以A为根节点的这个树上，也会显示在以C为根节点的这个树上，也就是以B为根节点的这个子树会打印多遍，这样打印的结果非非常冗长，不方便查看 pipdeptree # 打印的格式是 pip freeze 风格 pipdeptree -f pipdeptree --freeze # -d 指定树的深度。-d 0 就是不被任何其他包所依赖的包。-d 1 与 pip show 显示的所依赖的包一致 pipdeptree -d 0 pipdeptree -d 1 pipdeptree -d 1 -f # -p 指定某一个包 pipdeptree -p jupyter -d 1 # json 格式。与直接使用 pipdeptree 一样，会重复显示很多内容 pipdeptree --json-tree # json格式。显示每个已安装包的所依赖的包，不递归显示依赖的包依赖哪些包，相当于对 pip freeze 中的每个包进行 pip show 。区别于 pipdeptree -d 1，pipdeptree -d 1 是整个依赖树只显示深度为1的结果，所以某些已安装的包不会在输出结果中。 pipdeptree -j # 反向显示依赖树，即显示每个包被哪些包所依赖 pipdeptree -r # pipdeptree 的根节点是每个不被任何其他包所依赖的包。pipdeptree -a 的根节点是每个已安装的包 pipdeptree -a # 生成 mermaid 格式 pipdeptree --mermaid # 可生成 svg 等格式。需安装 graphviz, pip install graphviz, brew install graphviz pipdeptree --graph-output svg \u003e ~/Desktop/draft.svg ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"设置Python默认版本 在Mac终端输入python，默认进入python2.7环境；现将python命令设置为其他版本 例在用brew安装好python@3.8后，在终端执行命令brew info python@3.8可看到以下信息： ==\u003e Caveats Python has been installed as /usr/local/bin/python3 Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to `python3`, `python3-config`, `pip3` etc., respectively, have been installed into /usr/local/opt/python@3.8/libexec/bin 关注上面的最后一行，将下述命令写入文件~/.zprofile即可： export PATH=/usr/local/opt/python@3.8/libexec/bin:$PATH 现在执行which python，即可得到下面结果： /usr/local/opt/python@3.8/libexec/bin/python 本质上就是创建软链接，从输出信息可看出在文件夹/usr/local/opt/python@3.8/libexec/bin下已经创建好了对应的软链接，export PATH=/usr/local/opt/python@3.8/libexec/bin:$PATH使得该文件中加载的优先级更高，使得系统忽略了/usr/bin中的python命令(这是系统自带的Python2.7) ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"使用虚拟环境 # 创建虚拟环境 python -m venv ~/.venv/pytorch # 最后一个参数是虚拟环境的路径；默认不会复制pip包到虚拟环境 python -m venv --system-site-packages ~/.venv/pytorch # 会把系统安装的pip包复制到虚拟环境中 # 激活虚拟环境 source ~/.venv/pytorch/bin/activate # 即虚拟环境里bin文件夹下的activate # 退出虚拟环境 deactivate 如上，可将虚拟环境放在一个隐藏文件夹下，避免无意被修改 虚拟环境的Python版本会与当前使用Python版本相同；如欲创建Python3.9的虚拟环境，在用brew安装好Python3.9后，用命令python3.9 -m venv testvenv创建的testvenv虚拟环境的Python版本就是3.9 对于多个Python版本，欲设置默认Python版本可参见设置Python默认版本 激活虚拟环境的命令稍显复杂，参见创建Unix可执行文件来实现快捷激活虚拟环境 创建完Python虚拟环境~/.venv/pytorch后，可在~/.venv/pytorch/bin文件夹下看到两个软链接python和python3，它们的原身都是对应Python的安装路径，如用brew安装的Python:/usr/local/Cellar/python@3.8/3.8.9/Frameworks/Python.framework/Versions/3.8/bin/python3.8。这意味着如果以后用brew对Python3.8进行了升级，比如升级到了3.8.10版本，这两个软链接文件就失效了，需要重新创建软链接文件python和python3，使它们的原身指向更新后的python3.8路径。 rm ~/.venv/pytorch/bin/python ~/.venv/pytorch/bin/python3 rm ~/.venv/tf2/bin/python ~/.venv/tf2/bin/python3 ln -s /usr/local/Cellar/python@3.8/3.8.12_1/Frameworks/Python.framework/Versions/3.8/bin/python3.8 ~/.venv/pytorch/bin/python ln -s /usr/local/Cellar/python@3.8/3.8.12_1/Frameworks/Python.framework/Versions/3.8/bin/python3.8 ~/.venv/pytorch/bin/python3 ln -s /usr/local/Cellar/python@3.8/3.8.12_1/Frameworks/Python.framework/Versions/3.8/bin/python3.8 ~/.venv/tf2/bin/python ln -s /usr/local/Cellar/python@3.8/3.8.12_1/Frameworks/Python.framework/Versions/3.8/bin/python3.8 ~/.venv/tf2/bin/python3 ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"查看python包安装位置 star@MacBookPro: ~ $ python Python 3.12.2 (main, Feb 20 2024, 04:30:04) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. \u003e\u003e\u003e import numpy \u003e\u003e\u003e numpy \u003cmodule 'numpy' from '/usr/local/lib/python3.12/site-packages/numpy/__init__.py'\u003e ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:4","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Python第三方库 opencv-python 用pip可安装下面四个版本的opencv： opencv-python：这个存储库只包含OpenCV库的主要模块。 opencv-contrib-python ： 该库包含主要模块与contrib模块。 opencv-python-headless：与opencv-python相同但没有GUI功能。适用于无界面系统。 opencv-contrib-python-headless：与opencv-contrib-python相同，但没有GUI功能。适用于无界面系统。 当opencv与PyQt5发生冲突时(类似如下)，可考虑安装无GUI功能的opencv，这样就不会发生冲突了 objc[56361]: Class QMacAutoReleasePoolTracker is implemented in both /usr/local/lib/python3.8/site-packages/PyQt5/Qt/lib/QtCore.framework/Versions/5/QtCore (0x10e97f178) and /usr/local/lib/python3.8/site-packages/cv2/.dylibs/QtCore (0x113e21700). One of the two will be used. Which one is undefined. ………… 参考： pip 安装 opencv macos 中先安装了pyqt5再安装opencv出现的QtCore冲突问题 ","date":"2023-05-03","objectID":"/posts/mac-notes/:4:5","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"C/C++ ","date":"2023-05-03","objectID":"/posts/mac-notes/:5:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"编译器 GCC/Clang/LLVM GCC（GNU Compiler Collection）是一个由GNU项目开发的编译器集合，它支持多种编程语言，包括C、C++、Objective-C、Fortran、Ada等。GCC最初是为C语言设计的，但随着时间的发展，它已经扩展到支持多种语言。 LLVM（Low Level Virtual Machine）是一个编译器和工具链技术的集合，它提供了编译器的中间表示(IR)、优化器和代码生成器。LLVM的设计允许它作为多种语言的编译器后端，并且可以用于编译期、链接期和运行时的优化。 Clang是LLVM项目的一部分，它是C、C++、Objective-C和Objective-C++语言的编译器前端。Clang使用LLVM作为其后端，因此它能够利用LLVM提供的各种优化和代码生成技术。Clang的一个主要优势是它的模块化设计，这使得它更容易集成到不同的工具和环境中，并且它的错误信息通常被认为比GCC更清晰和易于理解。 三者之间的关系可以概括为： GCC是一个独立的编译器集合，它有自己的前端和后端。 LLVM是一个编译器基础设施项目，提供了编译器的中间表示和优化器等组件。 Clang是LLVM的前端，专门用于C、C++和Objective-C等语言的编译，它使用LLVM的后端进行代码优化和生成。 Mac上的编译器 Mac自带的是Clang，可以通过Homebrew额外安装LLVM和GCC Mac自带的gcc和g++命令，通过gcc --version和g++ --version就可以发现，这两命令实际上也是使用的Clang，不是GCC。自带的gcc命令不是clang的软链接，实际编译运行代码发现二者也不一样 头文件搜索路径 使用下述命令可以查看C/C++编译器的头文件搜索路径 clang -v -x c -E /dev/null clang++ -v -x c++ -E /dev/null gcc -v -x c -E /dev/null g++ -v -x c++ -E /dev/null 可以在运行结果中看到有下面两行 #include \"...\" search starts here: #include \u003c...\u003e search starts here: 此外，可以通过设置环境变量C_INCLUDE_PATH和CPLUS_INCLUDE_PATH来添加额外的头文件搜索路径，How to add a default include path for GCC in Linux? export CPLUS_INCLUDE_PATH=/diy/include export C_INCLUDE_PATH=/myself/include ","date":"2023-05-03","objectID":"/posts/mac-notes/:5:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"第三方C++库 比如通过Homebrew安装了Eigen，在代码中使用了相关头文件后，编译报错找不到该头文件，需要手动将该软件的头文件目录添加到编译器的某个头文件搜索目录中。 在brew install eigen命令运行完成后，或者使用brew info eigen命令可以看到安装路径，在该软件的安装路径下，可以找到头文件所在的文件夹。将该文件夹在编译器的某个头文件搜索目录中创建一个软链接即可。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:5:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"自动操作 shell命令参考：Linux shell 之 提取文件名和目录名的一些方法 创建的文件默认储存路径: ~/Library/Services ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"用特定软件打开文件(夹) 打开自动操作.app，新建文稿 - 快速操作，选择运行Shell脚本，工作流程收到当前 - 文件或文件夹，位于 - 放达.app，Shell选择**/bin/zsh**即可，传递输入 - 作为自变量，写入以下代码： for f in \"$@\" do open -a \"Visual Studio Code\" \"$f\" done 自定义名称保存后，即可实现右键用Visual Studio Coe打开文件夹。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"双击打开ipynb文件 利用自动操作.app实现双击ipynb文件在浏览器中打开 自动操作 - 新建文稿 - 应用程序，选择运行shell脚本，传递输入 - 作为自变量，写入以下代码： variable=\"'$1'\" the_script='tell application \"terminal\" to do script \"jupyter notebook ' osascript -e \"${the_script}${variable}\\\"\" 自定义名称保存，将刚刚创建的应用程序设置为打开ipynb文件的默认应用程序即可。 另外，在程序台中直接打开刚创建的应用程序，也会在浏览器中打开jupyter notebook 根据需要，可在代码jupyter notebook 后加上--notebook-dir=~ ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"右键解压缩rar Mac默认支持.zip文件的解压缩，但不支持.rar文件，具体操作见rar\u0026unrar:解压缩 每次进入终端进行解压缩稍显繁琐，可在 自动操作.app 中新建快捷操作 打开自动操作.app，新建文稿 - 快速操作，选择运行Shell脚本，工作流程收到当前 - 文件或文件夹，位于 - 放达.app，Shell选择**/bin/zsh**即可，传递输入 - 作为自变量，写入以下代码： for f in \"$@\" do PATH=\"/usr/local/bin:$PATH\" unrar x $f $(dirname ${f}) done 自定义名称保存后，即可实现右键解压rar文件。但有时会提示发生了错误解压失败，这说明当前文件夹内有文件与压缩包内文件重名。 对于压缩，同以上步骤，写入下列代码： for f in \"$@\" do PATH=\"/usr/local/bin:$PATH\" rar a $(echo $f | cut -d . -f1).rar $f done 此时右键进行rar压缩会创建一个与文件名(文件夹名)相同的rar压缩包，但选择多个文件进行压缩时，得到的是多个压缩文件而非一个。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"转换图片格式-todo 打开自动操作.app，新建文稿 - 快速操作 https://sspai.com/post/66511 ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:4","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"新建文件 tell application \"Finder\" set pathList to (quoted form of POSIX path of (folder of the front window as alias)) -- 访达当前窗口的文件夹的路径 end tell set filePath to pathList \u0026 \"未命名.txt\" set fileExists to (do shell script \"if [ -e \" \u0026 filePath \u0026 \" ]; then echo true; else echo false; fi\") -- 用shell脚本判断文件是否存在 if fileExists is equal to \"true\" then display alert \"新建文件失败！\" message filePath \u0026 \"已经存在！\" as critical else do shell script \"touch \" \u0026 filePath end if ","date":"2023-05-03","objectID":"/posts/mac-notes/:6:5","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"解压缩 ","date":"2023-05-03","objectID":"/posts/mac-notes/:7:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"rar\u0026unrar Mac默认支持.zip文件的解压缩，但不支持.rar文件 下载 到RARLAB官网下载rar包RAR 5.91 for macOS (64 bit) 安装 将下载的.tar.gz压缩包解压得到一个文件夹，打开终端进入该文件夹，执行以下命令进行安装： sudo install -c -o $USER rar /usr/local/bin/sudo install -c -o $USER unrar /usr/local/bin 解压缩命令 解压：unrar x fileName.rar 后面也可接文件路径解压到指定地方 压缩：rar a fileName.rar file1 file2 folder1 folder2将多个文件和文件夹压缩成一个文件 新建右键快捷操作 见右键解压缩rar ","date":"2023-05-03","objectID":"/posts/mac-notes/:7:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"unar Mac自带的unzip命令查看与解压压缩包时，命令行中部分中文的输出会显示乱码。而下面提到的lasr和unar可以通过指定编码方式以正确显示中文。 brew install unar 安装完成后会得到两个命令行程序： lsar: 查看压缩包内容，不解压 unar: 解压压缩包 lsar -l -e utf-8 test.zip -l: 打印压缩包中文件的详细信息 -L: 打印压缩包中文件的更详细信息 -e: 指定编码方式 unar test.zip -o folder -e utf-8 -o: 指定输出目录 -e: 指定编码方式 ","date":"2023-05-03","objectID":"/posts/mac-notes/:7:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"you-get 使用you-get需要安装ffmpeg，执行下述命令进行安装： brew install you-getbrew install ffmpeg 视频下载命令： you-get url下载url网址对应的视频 you-get -o path url下载视频到指定路径 you-get -i url显示视频详情，进而可选择不同清晰度进行下载 you-get --format=格式 url下载对应清晰度视频，默认下载最高清晰度 you-get -l url批量下载一个列表的全部视频 有时报错，给url加引号即可 GitHub网址：https://github.com/soimort/you-get ","date":"2023-05-03","objectID":"/posts/mac-notes/:8:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"svn git clone是用于下载整个项目文件，下载github上某个特定文件夹，可用下述方法： 例：对于网址https://github.com/lib-pku/libpku/tree/master/folder1/folder2，将其中的/tree/master/改成/trunk/，即https://github.com/lib-pku/libpku/trunk/folder1/folder2，后再执行下列命令，即可下载folder2文件夹下的所有文件： svn checkout https://github.com/lib-pku/libpku/trunk/folder1/folder2 对非master分支，同理；若出现下述警告：svn: error: The subversion command line tools are no longer provided by Xcode.，则用brew安装svn即可。 ","date":"2023-05-03","objectID":"/posts/mac-notes/:9:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":".py文件转化成.app文件 进入终端，依次输入下述命令： pip install py2app py2applet --make-setup MyApplication.py python setup.py py2app 第一个命令会在当前文件夹下创建bulid和dist两个文件夹以及setup.py文件，运行完第二个命令，即可在dist文件夹下看到转换后的.app文件，如果该.app文件打开出现错误，可在第二条命令后加参数-A试试，但此时生成的应用会依赖文件MyApplication.py，若修改该文件，应用会受到相应的影响。详见官网：https://py2app.readthedocs.io/en/latest/tutorial.html 附：Mac自带python2.7，命令行中python命令默认打开python2.7，python3.x版本应使用命令python3 ","date":"2023-05-03","objectID":"/posts/mac-notes/:10:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"IJavascript ","date":"2023-05-03","objectID":"/posts/mac-notes/:11:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"安装 执行下列命令进行安装，参考自官网https://www.npmjs.com/package/ijavascript brew install pkg-config node zeromqpip install --upgrade pyzmq jupyternpm install -g ijavascriptijsinstall 成功的话，打开jupyter notebook在新建下，可看到Javascript(Node.js)，新建一个文件，打开即可在其中运行javascript；用命令ijsnotebook也可以启动jupyter notebook ","date":"2023-05-03","objectID":"/posts/mac-notes/:11:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"可能遇到的问题 npm安装ijavascript失败 npm是Node.js默认的、用JavaScript编写的软件包管理系统。 若运行npm install -g ijavascript出现错误提示NPM Error：gyp: No Xcode or CLT version detected! 在终端运行以下命令： sudo rm -rf $(xcode-select -print-path)xcode-select --install 运行完第一条命令，系统自带g++，git包括自行安装brew等命令都会无法使用，运行这些命令系统会提示需要安装开发者命令行工具，第二条命令也无法运行；系统的软件更新里会提示Command Line Tools有更新可安装，如果安装失败，可自行前往 官网 下载Command Line Tools进行安装，Command Line Tools安装成功后，可再次运行npm install -g ijavascript ps: 可以试试不运行第一条命令，直接运行第二条命令来安装Command Line Tools 参考：NPM Error：gyp: No Xcode or CLT version detected! .ipynb无法运行js代码 打开jupyter notebook会出现类似如下错误提示，javascript版本的.ipynb文件里js代码无法运行： Error: The module '/usr/local/lib/node_modules/ijavascript/node_modules/zeromq/build/Release/zmq.node'was compiled against a different Node.js version usingNODE_MODULE_VERSION 57. This version of Node.js requiresNODE_MODULE_VERSION 59. Please try re-compiling or re-installingthe module (for instance, using `npm rebuild` or `npm install`). 可在终端运行ijsinstall --spec-path=full，降低node.js版本(参见安装指定版本node.js(最新node@14版本降低到node@10) 参考： https://github.com/n-riesco/ijavascript/issues/151 http://n-riesco.github.io/ijavascript/doc/usage.md.html ","date":"2023-05-03","objectID":"/posts/mac-notes/:11:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Node.js ","date":"2023-05-03","objectID":"/posts/mac-notes/:12:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"安装指定版本node.js 如果之前使用brew install node安装过node，需要先执行brew uninstall node来移除ndoe.js 运行 brew search node查找可使用的node版本 安装你需要的版本, 例 brew install node@10 安装完后，可以看到node@10的安装路径，例/usr/local/Cellar/node@10/10.22.1 自动会在/usr/local/opt/node@10创建一个/usr/local/Cellar/node@10/10.22.1文件夹的软链接 添加环境变量，添加到用户级环境变量或者添加到系统级环境变量 export PATH=\"/usr/local/opt/node@10/bin:$PATH\"写入到~/.zprofile文件中(用户级系统变量) /usr/local/opt/node@10/bin写入到/etc/paths文件中(系统级环境变量)，修改该文件需要sudo权限 修改后重启终端，输入命令node -v可正常执行 替代方案：不修改环境变量，直接执行下述命令在/usr/local/bin文件夹下创建软链接亦可，/node@10/10.22.1部分因版本而异(执行完 brew install node@10最后一行会显示安装路径) ln -s /usr/local/Cellar/node@10/10.22.1/bin/node /usr/local/bin/node 当然，将/usr/local/Cellar/node@10/10.22.1/bin/node复制到/usr/local/bin下亦可，但没必要，创建软链接即可，打开/usr/local/bin文件夹，会看到里面几乎全是软链接 安装完毕后，用node file.js命令可执行对应javascript文件，执行命令node进入交互模式 安装其他库操作类似，例如brew install qt后qmake命令不能使用，也需要添加环境变量或添加软链接 参考：homebrew 安装指定版本node ","date":"2023-05-03","objectID":"/posts/mac-notes/:12:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"node.js里使用d3.js 安装相关包 终端执行命令npm install d3进行安装，node.js中使用d3.js方式如下 var d3 = require(\"d3\"); var d3 = Object.assign({}, require(\"d3-format\"), require(\"d3-geo\")); // 使用其中几个模块 安装好后会在当前文件夹下创建node_modules文件夹，这个文件夹是使用d3所必须的，并且只有在当前文件夹及其子文件夹下上述代码才不会报错 为了更好的使用d3，还需安装jsdom，用npm安装npm install jsdom 安装指定版本的包 npm view d3 versionsnpm install d3@5npm ls d3 使用示例 var fs = require('fs');var d3 = require('d3');var jsdom = require('jsdom');var { JSDOM} = jsdom;var fakeDom = new JSDOM();var body = d3.select(fakeDom.window.document).select('body');var svg = body.append(\"svg\") .attr(\"width\", 100) .attr(\"height\", 100) .attr(\"xmlns\", \"http://www.w3.org/2000/svg\");svg.append(\"rect\") .attr(\"width\", 80) .attr(\"height\", 80) .style(\"fill\", \"steelblue\"); $$.svg(svg.node().outerHTML); // 在jupyter notebook中可输出svg图像，在node交互模式中报错fs.writeFileSync(\"test.svg\", body.html()); // 保存，输出 上述代码运行环境：jsdom@16.4.0 d3@6.2.0 ijavascript@5.2.0 参考： How to use D3 in Node.js properly? https://www.npmjs.com/package/d3 https://gist.github.com/kunnix/148eadcfde3e978a1ad1d3ec9e2a7265 How to output SVG in a Jupyter notebook using jsdom, D3 and IJavascript ","date":"2023-05-03","objectID":"/posts/mac-notes/:12:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"ssh ","date":"2023-05-03","objectID":"/posts/mac-notes/:13:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"通过ssh访问Linux 在Linux终端执行命令ifconfig可看到如下信息： ens33: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 172.16.172.2 netmask 255.255.255.0 broadcast 172.16.172.255 inet6 fe80::21e1:8759:16b6:f7c8 prefixlen 64 scopeid 0x20\u003clink\u003e 从中可以知道ip地址为172.16.172.2 再执行命令sudo apt-get install openssh-server安装openssh-server 最后在Mac终端执行命令ssh star@172.16.172.2即可登录Linux服务器（star为Linux用户名） Linux在开机的情况下才能通过ssh登录 参考：Windows下通过ssh连接Linux ","date":"2023-05-03","objectID":"/posts/mac-notes/:13:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"装系统 ","date":"2023-05-03","objectID":"/posts/mac-notes/:14:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"安装Ubuntu双系统 格式化U盘 进入MAC磁盘工具，将U盘格式化，格式设置为MS-DOS（FAT） 制作Ubuntu启动盘 下载balenaEtcher软件来制作启动盘 也可以通过命令行来制作启动盘，但该方式制作的速度非常慢 磁盘分区 分出一块磁盘区域用于后续安装Ubuntu，分区磁盘的格式设置为MS-DOS（FAT） 安装Ubuntu 重启电脑，按住option键，通过U盘启动。进入安装程序后，选择刚刚分区出来的磁盘，然后格式化该磁盘：格式为ext4，挂载点为/；格式化之后把“用于启动加载程序安装的设备”设置成刚刚格式化的磁盘，后面继续按照安装步骤执行下去即可。 Ubuntu安装完成后，之后开机默认会进入Ubuntu系统，想进入Mac系统，在开机的时候按住option键，可以看到启动盘选择界面，选择Mac对应的磁盘即可。此外，还可以借助第三方工具rEFInd 安装引导工具rEFInd 重启 Mac，按住 Command+R 键直到 Apple logo 出现，打开Terminal，在 Terminal 中输入 csrutil disable，之后回车重启 Mac。安装完成后，（安装方法可参见下载文件中的readme.txt文件）重启 Mac，按住 Command+R 键直到 Apple logo 出现，打开Terminal，在 Terminal 中输入csrutil enable 参考： Create a bootable USB stick on macOS MacOS+Ubuntu双系统，原来MacBook安装linux也简单！ mac上安装ubuntu双系统教程 ","date":"2023-05-03","objectID":"/posts/mac-notes/:14:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"通过U盘重装MacOS Apple官方网站: 创建可引导的 macOS 安装器 到App Store下载macOS Monterey，下载完后，在应用程序文件夹会有安装macOS Monterey.app文件。 将U盘插上电脑，执行下述命令 sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume 其中MyVolume是U盘名称，U盘可以不用提前格式化，执行上述命令后，U盘会被格式化为Mac OS 扩展格式。 输入上述命令后，按照提示输入密码和Y即可，终端的输出信息如下： star@star-MBP: ~ $ sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/STAR Password: Ready to start. To continue we need to erase the volume at /Volumes/STAR. If you wish to continue type (Y) then press return: Y Erasing disk: 0%... 10%... 20%... 30%... 100% Making disk bootable... Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100% Install media now available at \"/Volumes/Install macOS Monterey\" star@star-MBP: ~ $ ","date":"2023-05-03","objectID":"/posts/mac-notes/:14:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Typora 手动修改mermaid的版本： /Applications/Typora.app/Contents/Resources/TypeMark/lib/diagram/diagram.min.js换成mermaid.min.js文件的内容 参考： Typora不支持最新Mermaid语法的解决办法 ","date":"2023-05-03","objectID":"/posts/mac-notes/:15:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Latex Latex之安装宏包 https://latex-beamer.com/tutorials/beamer-themes/ 使用minted包，用xelatex编译时需加参数-shell-escape 使用 minted 宏包 ","date":"2023-05-03","objectID":"/posts/mac-notes/:16:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"PDFtk ","date":"2023-05-03","objectID":"/posts/mac-notes/:17:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"安装 官网：https://www.pdflabs.com/tools/pdftk-server/，Mac安装pdf-server版本，无GUI，命令行工具 可能的报错：（PDFtk版本号过低） pdftk: Bad CPU type in executable 解决方案：How to solve “pdftk: Bad CPU type in executable” on Mac? ","date":"2023-05-03","objectID":"/posts/mac-notes/:17:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"使用示例 书签导出和导入 官网Blog：https://www.pdflabs.com/blog/export-and-import-pdf-bookmarks/ # 导出书签 pdftk input.pdf dump_data output bookmark.txt # 导入书签 pdftk input.pdf update_info bookmark.txt output output.pdf 合并PDF pdftk file1.pdf file2.pdf file3.pdf cat output merged.pdf # 可使用通配符 pdftk *.pdf cat output combined.pdf 拆分PDF 将PDF拆分成单独的页面文件 pdftk input.pdf burst # 可指定输出文件名 pdftk input.pdf burst output page_%02d.pdf 提取PDF中的特定页面 # 1-10页 pdftk original.pdf cat 1-10 output pages1-10.pdf # 第1和第5页 pdftk input.pdf cat 1 5 output extracted_pages.pdf ","date":"2023-05-03","objectID":"/posts/mac-notes/:17:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"PDF书签管理 在豆瓣上可以搜到部分书的目录，将目录复制下来写成特定格式的文件就可以使用对应的工具导入书签 ","date":"2023-05-03","objectID":"/posts/mac-notes/:18:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"PDFtk ","date":"2023-05-03","objectID":"/posts/mac-notes/:18:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"PDF-Bookmark Github地址：https://github.com/xianghuzhao/pdf-bookmark ","date":"2023-05-03","objectID":"/posts/mac-notes/:18:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Adobe Acrobat 【页面缩略图】-【选项】-【页面标签】 ","date":"2023-05-03","objectID":"/posts/mac-notes/:18:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"其他 cpdf-binaries: https://github.com/coherentgraphics/cpdf-binaries ","date":"2023-05-03","objectID":"/posts/mac-notes/:18:4","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"哔哩哔哩视频下载 ","date":"2023-05-03","objectID":"/posts/mac-notes/:19:0","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"哔哩哔哩MAC客户端 使用哔哩哔哩MAC客户端下载视频，会得到两个m4s文件 用文本编辑器打开这两个m4s文件，删除最前面的9个30，保存文件 将较大的那个m4s文件后缀改成mp4即得到视频文件（无声音），将较小的那个m4s文件后缀改成mp3即得到音频文件 最后合并mp4文件和mp3文件。用客户端下载视频可以得到原视频封面，可以进一步设置一下合成后的视频的封面 ","date":"2023-05-03","objectID":"/posts/mac-notes/:19:1","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"you-get 但不能下载高清晰度的 ","date":"2023-05-03","objectID":"/posts/mac-notes/:19:2","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"Chrome插件 NeatDownloadManager：分别下载视频和音频文件，用FFmpeg可合并视频文件和音频文件为一个完整的视频 猫抓：选择视频文件和音频文件合并下载 ","date":"2023-05-03","objectID":"/posts/mac-notes/:19:3","tags":["Mac","Notes"],"title":"Mac Notes","uri":"/posts/mac-notes/"},{"categories":["Blog","Notes"],"content":"相关说明 下述相关配置，无特别说明，使用的是bash终端 某些笔记是在Docker中的ubuntu中实践出来的，某些是双系统或虚拟机中实践出来的 ","date":"2023-05-03","objectID":"/posts/ubuntu/:1:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"apt apt是对apt-get和apt-cache等工具的整合和改进，提供了更简洁和用户友好的接口。apt在一些操作上的输出更加简洁明了。 常用命令 apt update apt upgrade 升级软件包 apt list –upgradeable 列出可更新的软件包及版本信息 apt install \u003cpackage_name\u003e 安装指定的软件命令 apt install \u003cpackage_1\u003e \u003cpackage_2\u003e \u003cpackage_3\u003e 安装多个软件包 apt update \u003cpackage_name\u003e 更新指定的软件命令 apt show \u003cpackage_name\u003e 显示软件包具体信息,例如:版本号，安装大小，依赖关系等等 apt remove \u003cpackage_name\u003e 删除软件包命令 apt autoremove 清理不再使用的依赖和库文件 apt purge \u003cpackage_name\u003e 移除软件包及配置文件 apt search \u003ckey_word\u003e 查找软件包命令 apt list –installed 列出所有已安装的包 apt list –all-versions 列出所有已安装的包的版本信息 参考：https://www.runoob.com/linux/linux-comm-apt.html ","date":"2023-05-03","objectID":"/posts/ubuntu/:2:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"基础设置 apt update apt install build-essential # 安装gcc等 apt install net-tools # 会安装ifconfig apt install iputils-ping # 会安装ping apt install vim gdb lsof apt install python3 python3-pip ","date":"2023-05-03","objectID":"/posts/ubuntu/:3:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"bash 配置文件：~/.bashrc # Set bash prompt export PS1=\"\\[\\e[0m\\n\\]\\[\\e[1;38;5;214m\\][\\u@\\H] \\[\\e[38;5;45m\\]\\s-\\v \\[\\e[38;5;39m\\]\\w\\[\\e[0m\\]\\n\\[\\e[1;38;5;10m\\]\\$\\[\\e[0m\\] \" # Set GCC output color in order to highlight errors and warnings export GCC_COLORS='error=01;38;5;196:warning=01;38;5;220:note=01;38;5;81:range1=38;5;47:range2=34:locus=01:\\ quote=01:fixit-insert=32:fixit-delete=31:\\ diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32' export LS_COLORS=$LS_COLORS':pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37' ","date":"2023-05-03","objectID":"/posts/ubuntu/:4:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"LS_COLORS LS_COLORS变量：设置ls命令在显示文件和目录时使用的颜色。 echo $LS_COLORS查看当前LS_COLORS变量，以下ubunt中为LS_COLORS变量的默认配置。在LS_COLORS中，各项设置用冒号分割，每个设置都由十六进制数字组成，用分号分隔。 rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90: 举例说明其含义 ow=34;42: ow表示其他可写文件夹，34表示字体颜色是蓝色，42表示字体背景色是绿色 *.mp4=01;35: *.mp4表示后缀为.mp4的文件，01表示粗体，35表示洋红色 dircolors --print-database命令查看默认的颜色设置，命令执行结果部分如下 # =================================================================== # Basic file attributes # =================================================================== # Below are the color init strings for the basic file types. # One can use codes for 256 or more colors supported by modern terminals. # The default color codes use the capabilities of an 8 color terminal # with some additional attributes as per the following codes: # Attribute codes: # 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed # Text color codes: # 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white # Background color codes: # 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white 上述结果展示了部分数字对应的含义 dircolors --print-ls-colors命令展示已经被完全转义的颜色，命令执行结果部分如下 ow 34;42 ex 01;32 *.tar 01;31 *.tgz 01;31 部分变量的含义 di：表示目录（directory）的颜色。 fi：表示普通文件（file）的颜色。 ex：表示可执行文件（executable）的颜色。 ln：表示符号链接（symbolic link）的颜色。 ow：表示其他可写（Other Writable）件或目录的颜色。 参考：linux修改ls文件颜色-CSDN ","date":"2023-05-03","objectID":"/posts/ubuntu/:4:1","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"配置示例 export LS_COLORS=$LS_COLORS':pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37' # export LS_COLORS='pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37:'$LS_COLORS 在命令行echo $LS_COLORS可以查看LS_COLORS变量的值，以:分割，分割后对应各项设置。$LS_COLORS':pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37'即为LS_COLORS变量和字符串:pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37拼接后的结果。 配置完后，查看 LS_COLORS变量echo $LS_COLORS，可以发现结果中有两个ow设置，因为默认的LS_COLORS变量中有设置ow，上述自定义的配置中又设置了ow。此时系统会采用后一个ow设置，因此想要自定义一个颜色设置，$LS_COLORS要写在自定义的字符串的前面。当然export LS_COLORS='pi=33:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37'也是可以的，但带上$LS_COLORS的好处是对于自己未指定的文件类型，会采用$LS_COLORS原始的设定。 在LS_COLORS变量的默认设置中，pi,bd,cd,or,su,sg,tw,ow,st这几个变量的设置如下 pi=40;33:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44 # 截取于echo $LS_COLORS 上述配置的作用实际就是去掉这几类文件的背景色，并保持文本颜色和默认一致 ","date":"2023-05-03","objectID":"/posts/ubuntu/:4:2","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"查看系统相关信息 常用命令 uname -a 可以查看系统相关信息 cat /proc/version 能显示内核版本等信息 hostname 查看主机名 lscpu 查看CPU信息 free -h 查看内存使用情况 df -h 查看磁盘空间使用情况 lsblk 查看块设备（磁盘等）信息 cat /etc/issue 查看发行版本 ","date":"2023-05-03","objectID":"/posts/ubuntu/:5:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"中文支持 # 先安装中文支持包 apt install language-pack-zh-hans # 再将下述添加到~/.bashrc LANG=\"zh_CN.UTF-8\" # 配置完后，终端里可以显示中文 ubuntu 20.04中文输入法安装-CSDN ","date":"2023-05-03","objectID":"/posts/ubuntu/:6:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"调整apt源 Ubuntu 的软件源配置文件是 /etc/apt/sources.list，可先将系统自带的该文件做个备份 cp /etc/apt/sources.list /etc/apt/sources.list.backup 将该文件下的内容替换成清华源，然后更新源， gedit /etc/apt/sources.list apt update 清华源：Ubuntu 镜像使用帮助 ","date":"2023-05-03","objectID":"/posts/ubuntu/:7:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"Ubuntu 24.04 LTS 在Ubuntu 24.04 LTS版本中，/etc/apt/sources.list文件的内容如下。 $ cat /etc/apt/sources.list # Ubuntu sources have moved to the /etc/apt/sources.list.d/ubuntu.sources # file, which uses the deb822 format. Use deb822-formatted .sources files # to manage package sources in the /etc/apt/sources.list.d/ directory. ","date":"2023-05-03","objectID":"/posts/ubuntu/:7:1","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"Linux Command ","date":"2023-05-03","objectID":"/posts/ubuntu/:8:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"netstat 用于显示网络状态。https://www.runoob.com/linux/linux-comm-netstat.html netstat -tunlp #用于显示tcp,udp的端口和进程等相关情况 -t或–tcp: 显示TCP传输协议的连线状况。 -u或–udp: 显示UDP传输协议的连线状况。 -n或–numeric: 直接使用IP地址，而不通过域名服务器。 -l或–listening: 显示监听中的服务器的Socket。 -p或–programs: 显示正在使用Socket的程序识别码和程序名称。 ","date":"2023-05-03","objectID":"/posts/ubuntu/:8:1","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"设置共享文件夹 环境 Ubuntu版本：Ubuntu 20.04.1 TLS 虚拟机：VMware Fusion 11/VMware Fusion 12 可直接看最后一行 在虚拟机软件里设置了共享文件夹，在Ubuntu中并不能直接看到，执行下述命令可查看共享的文件夹： vmware-hgfsclient 在Ubuntu中访问共享文件夹，需要将共享目录挂到/mnt/hgfs/目录下，/mnt/目录下的hgfs可能需要自己手动创建，执行下述命令： sudo vmhgfs-fuse .host:/ /mnt/hgfs/ 之后在/mnt/hgfs/目录下就可以看到共享的文件夹，但需要管理员权限sudo ls /mnt/hgfs/，想要普通账户就可以访问该文件夹，对上述命令需要进行修改： sudo vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other,nonempty 简言之：执行最后一条命令即可，没有hgfs文件夹就手动创建；且每次开机都需要执行该命令，见开机执行命令 参考：VMware Ubuntu18.10与Win10共享文件夹 ","date":"2023-05-03","objectID":"/posts/ubuntu/:9:0","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"开机执行命令 环境 Ubuntu版本：Ubuntu 20.04.1 TLS 虚拟机：VMware Fusion 11/VMware Fusion 12 编辑文件/etc/rc.local，这是一个“只读”文件，需要用sudo权限来修改，执行命令： sudo vim /etc/rc.local 在文件底部写入需要执行的命令，例如： #!/bin/bash sudo vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other,nonempty 保存后重启，如果命令没有如期执行，需要设置一下文件/etc/rc.local的权限，执行下述命令： sudo chmod +x /etc/rc.local 参考：Linux 开机执行命令 ","date":"2023-05-03","objectID":"/posts/ubuntu/:9:1","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":["Blog","Notes"],"content":"其他问题 Ubuntu16.04桌面突然卡住怎么办？ ","date":"2023-05-03","objectID":"/posts/ubuntu/:9:2","tags":["Ubuntu"],"title":"Ubuntu Notes","uri":"/posts/ubuntu/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/posts/first_post/:0:0","tags":null,"title":"My First Post","uri":"/posts/first_post/"}]